<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-04T15:14:14+06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">duoblogger</title><subtitle>We teach different concepts of competitive programming in Bengali. </subtitle><entry><title type="html">BDOI Practice Contest-2 Analysis</title><link href="http://localhost:4000/2019/09/26/bdoi-contest-2-analysis.html" rel="alternate" type="text/html" title="BDOI Practice Contest-2 Analysis" /><published>2019-09-26T00:00:00+06:00</published><updated>2019-09-26T00:00:00+06:00</updated><id>http://localhost:4000/2019/09/26/bdoi-contest-2-analysis</id><content type="html" xml:base="http://localhost:4000/2019/09/26/bdoi-contest-2-analysis.html">&lt;h2 id=&quot;problem-1--very-hard-problem&quot;&gt;Problem 1 : Very Hard Problem&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/html-statements/Statements.html&quot;&gt;Problem Description&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution:&lt;/h3&gt;

&lt;p&gt;এর সমাধানটি একদম সহজ। আমাকে $f(n)$ দেয়া আছে, আমাকে $n$ বেড় করতে হবে। আমরা ফাংশনের দিকে তাকালেই বুঝতে পারবো। এটি আসলে $1+2+3+….+n$ করছে। তার মানে হলো $f(x)$ হলো 1 থেকে n পর্যন্ত সংখ্যাগুলোর যোগফল। তাহলে আমরা এটাও বলতে পারি $\displaystyle{f(x) = \frac{x(x+1)}{2}}$। এবার আমাদোর জন্য সমস্যাটি সমাধান করা সহজ। একটু বীজগনিত খাটালেই এরকম হবেঃ&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n^2 + n = 2f(n)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n^2 + n -2f(n) = 0&lt;/script&gt;

&lt;p&gt;এবার দ্বিঘাত সমীকরন ব্যাবহার করে x এর মান বেড় করলেই হবে। যদি পাওয়া না যায় তাহলে উত্তর -1। মজার ব্যাপার হলো এটি আমি বাইনারি সার্চ দিয়ে সমাধান করেছিলাম। অর্থাৎ, n এর উপর বাইনারি সার্চ করে বেড় করেছি, কোন $n$ এর জন্য $f(n)$ এর মান ইনপুটের সমান হয়।&lt;/p&gt;

&lt;h2 id=&quot;problem-2-infinity-war-without-avengers&quot;&gt;Problem 2: Infinity war without Avengers!&lt;/h2&gt;

&lt;!-- [Problem Description](https://codeforces.com/group/wUWXh1K7Gk/contest/253497/problem/B) --&gt;
&lt;p&gt;&lt;a href=&quot;/assets/pdf/bdoi-2-prob-B.pdf&quot;&gt; Problem Statement &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;আমি এটা নিয়ে কিছু বলতে চাই না, &lt;a href=&quot;https://www.youtube.com/watch?v=pwpOC1dph6U&amp;amp;t=4s&quot;&gt;এই ভিডিওটা&lt;/a&gt; দেখে নিলেই হবে!&lt;/p&gt;

&lt;h2 id=&quot;problem-3-back-to-ssc-maths&quot;&gt;Problem 3: Back to SSC Maths&lt;/h2&gt;

&lt;!-- [Problem Description](https://codeforces.com/group/wUWXh1K7Gk/contest/253497/problem/C) --&gt;
&lt;p&gt;&lt;a href=&quot;/assets/pdf/bdoi-2-problem-c.pdf&quot;&gt; Problem Statement &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;সমস্যাটির সমাধান নামের মধ্যেই দেয়া আছে। এসএসসি সাধারন গনিত বইয়ের প্রথম চ্যাপ্টার ভালো করে পড়তে হবে। তবে ওখানে যে নিয়ম দেয়া আছে সেটা কোথা থেকে আসলো সেটা জানতে তোমাকে গুনোত্তর ধারা সম্পর্কে জানতে হবে। এজন্য এসএসসি হাইয়ার ম্যাথ বইয়ের গুনোত্তর ধারা সম্পর্কে পড়ে নিলেই পারার কথা। একটা হিন্ট দিয়ে দেই।&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;14.3333333333.....&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;= 14+0.3+0.03+0.003+......&lt;/script&gt;

&lt;p&gt;এভাবে একটা গুনোত্তর ধারা পাওয়া যাবে। আর সেটা সল্ভ করতে পারলেই হয়ে যাবে।&lt;/p&gt;

&lt;h2 id=&quot;problem-4-four-numbers&quot;&gt;Problem 4: Four Numbers&lt;/h2&gt;

&lt;!-- [Problem Description](https://codeforces.com/group/wUWXh1K7Gk/contest/253497/problem/D) --&gt;
&lt;p&gt;&lt;a href=&quot;/assets/pdf/bdoi-2-prob-d.pdf&quot;&gt; Problem Statement &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;এই প্রব্লেমটা খুব দারুন। সলিউশনটাও ভালো। অনেকটা greedy সলিউশন। আমাদের প্রথম আইডিয়া হলো, $A+B$ কে maximize করতে হবে আর $C-D$ কে minimized করতে হবে। তবে $C-D$ কে নিগেটিভ করা যাবেনা, তাহলে উত্তর নিগেটিভ চলে আসবে, যা maximum হবেনা। এবার এই প্রব্লেমটা $\mathcal O(n^2)$ বা $\mathcal O(n^2  \log n)$ এ সহজেই সমাধান করা যায়। যেকোন একটা পাশ ফিক্স করে আরেকটা লুপ চালিয়ে করা যায় আরকি। আমরা দেখি $\mathcal O(N)$ এ কীভাবে করা যায়।&lt;/p&gt;

&lt;p&gt;আমরা লিস্ট টাকে decreasing অর্ডারে সর্ট করে ফেলি। তাহলে আমরা শুরুতে $A = a_1$ আর $B = a_2$ ধরে নিতে পারবো। কারন প্রথম দুটি সংখ্যা সবথেকে বড়। এবার এই দুটিকে ফিক্স করার পর বাকি সংখ্যাগুলো থেকে আমাদেরকে এমন একজোড়া সংখ্যা বেড় করতে হবে, যাদের মধ্যে পার্থক্য সবথেকে কম। এখন লক্ষ্যনীয় যে, কখনোই একটি সংখ্যার সাথে তার পাশের সংখ্যার পার্থক্য, তার ২-৩ ঘর পরের সংখ্যার পার্থক্যের থেকে বেশি হতে পারবেনা। চিন্তা করলেই বোঝা যাবে। তাই আমরা শুধুমাত্র পাশাপাশি সংখ্যা নিয়ে চেক করবো এবং $a_i,a_{i+1}$ বেড় করবো যেন $\abs{a_i - a_{i+1}}$ minimized হয়। তাহলেই হয়ে যাবে। তবে এটাই কি সঠিক সলিউশন দিবে? নিচের কেসটির কথা চিন্তা করি।&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;13 \ \ \ 12 \ \ \ 10 \ \ \ 5 \ \ \ 2&lt;/script&gt;

&lt;p&gt;এখানে আমরা যদি 13+12 নিয়ে ফেলি, আর ওপাশে মিনিমাম ডিফারেন্স পাবো 3, তাহলে উত্তর হবে $\frac{25}{3} = 8.33333..$ কিন্তু আমরা যদি C = 13, D = 12 , A = 10, B = 5 নেই তাহলে আমরা পাবো 15, যা বেটার সলিউশন। তাহলে কী করা যায়? আসলে আমরা যেটা করছি, সেটা হলো $A = a_1$ আর $B = a_2$ ফিক্স করে দিচ্ছি, যেজন্য কিছু অপটিমাল সলিউশন মিস হয়ে যাচ্ছে। তবে খুব বেশি পরিমান কেস কিন্তু আর হ্যান্ডেল করার দরকার নেই। আমাদের শুধু দেখতে হবে $a_1$ বা $a_2$ এর কোনো একটি বা দুটিই C বা D হিসেবে কাজে লাগানো যাবে কিনা। কারন ওই কেস দুটি ছাড়া বাকি সবই হ্যান্ডেল করা হয়ে গেছে। এখন আমরা আরো দুটি জিনিসহ দেখলেই হয়ে যাবে। প্রথমত দেখবো $a_1$ কে C আর $a_2$ কে D ধরে। যদি সেটা ধরি, তাহলে $A,B$ কোনটা কোনটা হবে? যেহেতু লিস্ট ডিক্রিসিং অর্ডারে সাজানো, তাই সবথেকে বেটার হবে $A = a_3, B = a_4$ ধরলে, কারন এই দুটি ছাড়া A+B ম্যাক্সিমাইজ করার উপায় নেই। তার মানে, $A = a_3 , B = a_4 , C = a_1 , D = a_2$ নিয়ে দেখতে হবে একটা। আরেকটা মাত্র কেইস বাকি আছে। সেটি কি একটু চিন্তা করো। আমরা $a_1$ আর  $a_2$ এর যেকোন একটিকে C বা D তে দিব, আর আরেকটিকে A বা B তে। এবার আবার ওই কথাই, পাশাপাশি জোড়া ছাড়া C,D দেয়া লাভজনক না, তাই আমরা এবার $a_2 = C ,  a_3 = D$ আর $a_1 = A , a_4 = B$ নিয়ে দেখবো কি পাওয়া যায়। আর এই ৩ টা কেইস হ্যান্ডেল করলেই হয়ে যাবে। আর কোন অপটিমাল কেইস পাওয়া সম্ভব না। সলিউশন নিচে দিয়ে দিচ্ছি, ক্লিয়ার করার জন্য:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setprecision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;problem-5--segment-union&quot;&gt;Problem 5 : Segment Union&lt;/h2&gt;
&lt;!-- [Problem Description](...)
 --&gt;
&lt;p&gt;&lt;a href=&quot;/assets/pdf/bdoi-2-prob-e.pdf&quot;&gt; Problem Statement &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;এই প্রব্লেমটি অনেকভাবে সমাধান করা যায়। প্রথম সাবটাস্কের জন্য সোজা লুপ। পরেরটার জন্য যেহেতু একটা মাত্র কুয়েরি, তাই একটা প্রিফিক্স অ্যারের মতো কিছু একটা রেখে, $\mathcal O(1)$ এ আাপডেট করে একদম শেষে কুয়েরির উত্তর দেয়া যায়। তার পরের সাবটাস্কটি করার জন্য অনেক কিছু করা যায়। একটা সেগমেন্ট ট্রি রাখা যায়, &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt Decomposition&lt;/code&gt; করা যায়, $log(n)$ এ করার মতো কিছু &lt;code class=&quot;highlighter-rouge&quot;&gt;range minimum query&lt;/code&gt; ধরনের জিনিসপত্র দিয়ে এটি সল্ভ করা যায়, এবং বলা যায় এটি অনেকটা well known, non-trivial problem। আর শেষের সাবটাস্কে $l,r \leq 10^9$, অর্থাৎ, সেগমেন্ট ট্রিতে তুমি স্বাভাবিক ভাবে করতে পারবেনা। তবে তুমি চাইলে অ্যারে এর বদলে map ব্যাবহার করতে পারো। তাহলে $\mathcal O(\log^2 n)$ পার কুয়েরিতে সল্ভ করতে পারবে। &lt;code class=&quot;highlighter-rouge&quot;&gt;unordered_map&lt;/code&gt; দিয়ে আসলে এভারেজে $\mathcal O(\log n)$ পার কুয়েরিতে সল্ভ করা যায়। তবে এটা সমাধান করার একটি সুন্দর পদ্ধতি আছে, সেটা হলো &lt;code class=&quot;highlighter-rouge&quot;&gt;Implicit Segment Tree&lt;/code&gt;. এটি খুব সুন্দর একটা জিনিস, এখানে আমরা নোড তখনই বানাবো, যখন আমাদের নোড বানানোর দরকার পড়বে, ডাইনামিক্যালি মেমরি অ্যালোকেট করবো আরকি। এটি ব্যাখ্যা করতে গেলে অনেক কিছুই করতে হবে। তবে আমার মনে আছে, তাসমিম ভাইয়ার কাছ থেকে &lt;code class=&quot;highlighter-rouge&quot;&gt;Implicit Segtree&lt;/code&gt; এর একটা কোড নিয়ে আমি বসে বসে দেখে দেখে বুঝে গিয়েছিলাম কি হচ্ছে ব্যাপারটা। আসলে খুবই সোজাসাপ্টা কোড। আমি নিচে দিয়ে দিচ্ছি, আশা করি সবাই বুঝতে পারবে।&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
		&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;problem-6-hrsiam-attends-parties&quot;&gt;Problem 6: HrSiam Attends Parties&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/assets/pdf/bdoi-2-prob-f.pdf&quot;&gt; Problem Statement &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;এটি মনে হয় সবথেকে সহজ সমস্যা। a,b ইনপুট, $ceiling \bigg(\displaystyle{\frac{a}{b}} \bigg)$ আউটপুট।&lt;/p&gt;

&lt;h2 id=&quot;provlem-7-k-consecutive&quot;&gt;Provlem 7: K-consecutive&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/assets/pdf/bdoi-2-prob-g.pdf&quot;&gt; Problem Statement &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;এই প্রব্লেমটার মূল সলিউশন ডিপি। প্রথম সাবটাস্কে k = 1, যার মানে সলিউশন টা হবে $m \times (m-1)^{n-1} \mod m$। পরের সাবটাস্কে উরাধুরা ব্রুটফোর্স দিয়েই করে ফেলা যাবে, constraints খুব ছোট। এরপর ওই উরাধুরা ব্রুটফোর্সে $dp[ n ] [ k ] [m ]$ টাইপের কিছু একটা রেখে দিলে মোটামুটি পরের সাবটাস্ক হয়ে যাবে। এরপর শেষের সাবটাস্কে সমস্যা হলো $5000^3$ পরিমান মেমরি নেয়া পসিবল না। তাই আমাদের একটা ডাইমেনশন কমাতে হবে। আমরা চিন্তা করি, আমাদের কাছে কত ধরনের খাবার আছে, অথবা কোন খাবার নিয়ে বর্তমানে কাজ করছি, সেটা ততটা গুরুত্বপূর্ন না। কতভাবে সাজানো যায় সেটাই মূল বিষয়। তাই m কে রেখে আমাদের কোন কাজ নেই। আমরা $dp(at,cur)$ নিয়ে কাজ করবো। হয় এর পরের টায় বর্তমান ছাড়া আরেকটা নিব, তাহলে cur 1 হয়ে যাবে। কারন আমরা একটানা একাধিক খাবার নেইনি, $dp(at+1,1)$। আর যদি একই খাবার নেই তাহলে $dp(at+1,cur+1)$. এটা করলেই $\mathcal O(n^2)$ এ সমাধান করা যাবে। তবে আমার কেন যেন মনে হচ্ছে এটার আরো ভালো সলিউশন আছে, হয়তো লিনিয়ারের সাথে m বা k এর লগারিদমিক ফ্যাক্টর, তবে আমি এর থেকে ভালো সলিউশন বেড় করতে পারিনি। $\mathcal O(n^2)$ এর কোড দিয়ে দিচ্ছি।&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define ll long long 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;সবাইকে ধন্যবাদ।&lt;/p&gt;</content><author><name>Ahnaf Shahriar Asif</name></author><category term="Contest analysis" /><summary type="html">Problem 1 : Very Hard Problem</summary></entry><entry><title type="html">BDOI Practice Contest-1 Analysis</title><link href="http://localhost:4000/2019/08/21/bdoi-practice-contest-1.html" rel="alternate" type="text/html" title="BDOI Practice Contest-1 Analysis" /><published>2019-08-21T00:00:00+06:00</published><updated>2019-08-21T00:00:00+06:00</updated><id>http://localhost:4000/2019/08/21/bdoi-practice-contest-1</id><content type="html" xml:base="http://localhost:4000/2019/08/21/bdoi-practice-contest-1.html">&lt;h1 id=&quot;problems&quot;&gt;Problems&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#problem1&quot;&gt;Problem 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#problem2&quot;&gt;Problem 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#problem3&quot;&gt;Problem 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#problem4&quot;&gt;Problem 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problem-1&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;a name=&quot;problem1&quot;&gt;Problem 1&lt;/a&gt;&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Problem Description:&lt;/strong&gt; তোমাকে একটি সংখ্যা দেয়া হবে, তোমাকে “Welcome to BDOI Practice Contest-“ এই স্ট্রিংয়ের সাথে সংখ্যাটি প্রিন্ট করতে হবে। সম্পূর্ন প্রব্লেমটি &lt;a href=&quot;/assets/pdf/hello-world-r4-en.pdf&quot;&gt;এখানে&lt;/a&gt; পাওয়া যাবে।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Solution:&lt;/strong&gt; খুবই সহজ সমস্যা। এটার সলিউশন বলার মতো কিছু নেই। এটি দেয়া হয়েছে জাস্ট কয়জন পার্টিসিপেন্ট কন্টেস্ট করতে ঢুকেছে সেটা দেখার জন্য।&lt;/p&gt;

&lt;h2 id=&quot;problem-2&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;a name=&quot;problem2&quot;&gt;Problem 2&lt;/a&gt;&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Problem Description:&lt;/strong&gt; তোমাকে &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; টি সংখ্যা দেয়া আছে। তোমাকে সংখ্যাগুলোর সকল সাবসেট বেড় করে প্রত্যেকটা সাবসেটের Or Sum বেড় করে সেগুলো যোগ করে &lt;script type=&quot;math/tex&quot;&gt;10^9+7&lt;/script&gt; দিয়ে মড করে আউটপুট দিতে হবে। পুরো প্রব্লেমসেট &lt;a href=&quot;/assets/pdf/simple-game-r7-en.pdf&quot;&gt;এখানে&lt;/a&gt; পাওয়া যাবে।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Solution:&lt;/strong&gt; আমরা ধাপে ধাপে সল্ভ করার চেষ্টা করবো। একটা একটা করে সাবটাস্ক দেখি।&lt;/p&gt;

&lt;h4 id=&quot;subtask-1&quot;&gt;Subtask 1&lt;/h4&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; এর মান এতই ছোট যে আমরা হাতে হাতে হিসাব করে বেড় করে ফেলতে পারি। সর্বোচ্চ &lt;script type=&quot;math/tex&quot;&gt;2^3-1 = 7&lt;/script&gt; টি সাবসেট থাকতে পারে। যেটা হাতে হাতে বেড় করাই যায়।&lt;/p&gt;

&lt;h4 id=&quot;subtask-2&quot;&gt;Subtask 2&lt;/h4&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;n \leq 10^5&lt;/script&gt;, যার মানে আমরা সবগুলো সাবসেট বেড় করতে পারবোনা। কিন্তু বলা আছে &lt;script type=&quot;math/tex&quot;&gt;a_1 = a_2 = ...... = a_n&lt;/script&gt;। এবার আমরা চিন্তা করি। আমাদের সবগুলা সাবসেট বেড় করে ওগুলার Or Sum নিতে হবে। তবে আমরা কিন্তু Or এর একটা বৈশিষ্ট জানি, সেটা হলো &lt;script type=&quot;math/tex&quot;&gt;a \lor a = a&lt;/script&gt; . যার মানে এটাও সত্যি যে &lt;script type=&quot;math/tex&quot;&gt;a \lor a \lor a \lor a ...... = a&lt;/script&gt;। তাহলে আমাদের প্রত্যেকটা সাবসেটের Or Sum হবে &lt;script type=&quot;math/tex&quot;&gt;a_i&lt;/script&gt;। মোট সাবসেট থাকতে পারে &lt;script type=&quot;math/tex&quot;&gt;2^n-1&lt;/script&gt; টি।  যার মানে উত্তর দাঁড়াবে &lt;script type=&quot;math/tex&quot;&gt;\big\{ a_0 \times (2^n-1) \big\} \mod m&lt;/script&gt;।&lt;/p&gt;

&lt;h4 id=&quot;subtask-3&quot;&gt;Subtask 3&lt;/h4&gt;

&lt;p&gt;$ n \leq 20$, অর্থাৎ, আমরা সহজেই ব্যাকট্র্যাক করে সল্ভ করতে পারি। আমরা সবগুলো সাবসেট বেড় করবো, সবগুলোর Or Sum বেড় করবো, তারপর সেগুলো যোগ করবো। তার মানে ঠিক প্রব্লেমে যা করতে বলা হয়েছে, সেটাই করে ফেলব ব্যাকট্র্যাক করে। কম্প্লেক্সিটি হবে $\mathcal O(n \times 2^n)$। যেহেতু $n \leq 20$, মোটামুটি $20 \times 2^{20} \approx 2 \times 10^7$।&lt;/p&gt;

&lt;h4 id=&quot;subtask-5&quot;&gt;Subtask 5&lt;/h4&gt;

&lt;p&gt;আমরা Subtask 4 একটু পরে সল্ভ করবো। সাবটাস্ক 5 তুলনামূলক সহজ, আর Subtask 3 এর সাথে রিলেটেড। এখানে $n \leq 10^5$ কিন্তু $n-1$ টা সংখ্যা একই এবং কেবলমাত্র একটি সংখ্যা আলাদা থাকবে। তার মানে মাত্র $2$ টি আলাদা আলাদা সংখ্যা আছে। ধরে নিচ্ছি $a$ আর $b$। $a$ আছে $n-1$ বার আর $b$ আছে 1 বার। একটু খেয়াল করলে দেখা যাবে, আমরা $n-1$ টি সংখ্যা দিয়ে $2^{n-1}$ টি সাবসেট বানাতে পারবো, যেগুলোর প্রত্যেকটির Or Sum হবে $a$। আবার $b$ কে ব্যাবহার করে আরও $2^{n-1}$ টি সাবসেট বানানো যাবে যেগুলোর Or sum হওয়ার কথা $a \lor b$। আবার ওই $2^{n-1}$ টির মধ্যে একটা সাবসেটে শুধু b থাকবে। তাহলে আমাদের মূল উত্তর হবে &lt;script type=&quot;math/tex&quot;&gt;\big\{ a \times 2^{n-1} + (a \lor b) \times (2^{n-1}-1) + b \big\} \mod m&lt;/script&gt;।&lt;/p&gt;

&lt;h4 id=&quot;subtask-6&quot;&gt;Subtask 6&lt;/h4&gt;

&lt;p&gt;আমরা Subtask 5 এর দিকে লক্ষ্য করি। সেখানে দুইটা আলাদা আলাদা সংখ্যা $a,b$ আছে। যেজন্য উত্তর হয়েছে &lt;script type=&quot;math/tex&quot;&gt;\big\{ a \times 2^{n-1} + (a \lor b) \times 2^{n-1} \big\} \mod m&lt;/script&gt;। এখন যদি দুইটার বদলে $a_0,a_1,a_2…..,a_{19}$ থাকে, আমরা কি সল্ভ করতে পারবো?&lt;/p&gt;

&lt;p&gt;এবার আমাদের 3 টা Subtask বাকি আছে। Subtask 4, Subtask 7, Subtask 8। এই তিনটা সাবটাস্ক সল্ভ করার জন্য আমাদেরকে আরেকটু গনিত নিয়ে চিন্তাভাবনা করতে হবে।&lt;/p&gt;

&lt;h4 id=&quot;observation&quot;&gt;&lt;font color=&quot;#540eb5&quot;&gt;Observation:&lt;/font&gt;&lt;/h4&gt;

&lt;p&gt;আমরা আবার শুরুতে চলে যাই। মূলত Or বলতে কি বোঝায়?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$1 \lor 1 = 1$&lt;/li&gt;
  &lt;li&gt;$1 \lor 0 = 1$&lt;/li&gt;
  &lt;li&gt;$0 \lor 1 = 1$&lt;/li&gt;
  &lt;li&gt;$0 \lor 0 = 0$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;এবার ধরা যাক আমরা একটি সাবসেটের সবগুলো সংখ্যার Or বেড় করবো। তাহলে মূলত কী হচ্ছে ? নিচের 4 টি নাম্বারের Or বেড় করার চেষ্টা করে দেখ।&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$5 = 0000101$&lt;/li&gt;
  &lt;li&gt;$7 = 0000111$&lt;/li&gt;
  &lt;li&gt;$8 = 0001000$&lt;/li&gt;
  &lt;li&gt;$3 = 0000011$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;একটু চিন্তা করলেই আমরা একটা ব্যাপার ধরতে পারবো। আমাদের যদি ডানদিক থেকে $ith$ ইন্ডেক্সে(0 based index) কোনো একটি বিট 1 থাকে তাহলে সেখানে $2^i$ পরিমান সংখ্যা যোগ হচ্ছে। অর্থাৎ, উপরের লিস্টে i = 3 এ একটি বিট অন আছে, যার মানে আমাদের Or sum এ $2^3$  য‌োগ হবে। যার মানে দাঁড়াচ্ছে, $5 \lor 7 \lor 8 \lor 3 = 2^0+2^1+2^2+2^3 = 15$ কারন ওই সাবসেটে $0,1,2,3$ তম ইন্ডেক্সগুলোতে অন্তত একটি করে বিট অন আছে। এটা তো গেল একটা সাবসেটের সাম। এবার চিন্তা করি, যদি &lt;script type=&quot;math/tex&quot;&gt;[5,7,8,3 ]&lt;/script&gt; একটি সেট হয়, আর এর সবগুলো সাবসেটের অর সাম বেড় করতে বলা হয় তাহলে কি করা যেতে পারে।&lt;/p&gt;

&lt;p&gt;উপরের লিস্টের দিকে আবার তাকাই। ধরি ডান থেকে &lt;script type=&quot;math/tex&quot;&gt;0th&lt;/script&gt; ইন্ডেক্সটা। ওখানে দেখা যাচ্ছে 3 টা বিট অন, আর 1 টা বিট অফ। যার মানে দাড়াচ্ছে সেটে কেবলমাত্র একটা সংখ্যা আছে, যার প্রথম বিট $1$ নয়। তার মানে এরকম $2^1-1$ টা সাবসেট পাওয়া যাবে যখন উত্তরের সাথে $2^0$ add হবেনা। বাকি সবগুলো সাবসেটে একবার করে $2^0$ add হবে। আবার $1st$ ইন্ডেক্সের দিকে তাকাই। সেখানে 2 টি সংখ্যার বিট অন, 2 টি সংখ্যার বিট অফ। যার মানে $2^2-1$ টি সাবসেট পাওয়া যাবে, যখন উত্তরের সাথে $2^1$ add হবেনা। আবার এরকম $2^2-1$ টি সাবসেট পাওয়া যাবে যখন উত্তরের সাথে $2^1$ add হবে। এভাবে প্রত্যেক বিটের জন্য কতটুকু করে উত্তরের সাথে যোগ হচ্ছে এটা বেড় করতে পারলেই হবে। আমাদের বিট থাকতে পারে সর্বোচ্চ $\mathcal \log(a_i)$ টি। যার মানে আমাদের মোট কম্প্লেক্সিটি হলো ‌$\mathcal O(n \times \log(max(a_0,a_1……,a_{n-1})))$ । মূলত এই অবজারভেশন দিয়ে Subtask 4,7,8 তিনটাই করে ফেলা যায়। যার মানে এটাই 100 পয়েন্ট তোলার সলিউশন। নিচে কোড দিয়ে দিচ্ছি।&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// check(a,b) is true if bth bit of a is on. Else, it's false. &lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2ll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0ll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// loop till 31 is enough. I'm doing it for extra safety&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kaka&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bigmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kaka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bigmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;problem-3&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;a name=&quot;problem3&quot;&gt;Problem 3&lt;/a&gt;&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;প্রব্লেমটির জন্য &lt;a href=&quot;https://www.facebook.com/profile.php?id=100008132494101&amp;amp;ref=br_rs&quot;&gt;তাসমীম রেজা&lt;/a&gt; ভাইয়াকে ধন্যবাদ। প্রব্লেমটি ভাইয়ার কাছ থেকে নেয়া হয়েছে।&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Description:&lt;/strong&gt;  তোমাকে m টি তথ্য দেয়া থাকবে। প্রত্যেকবার একজোড়া সংখ্যা দেয়া থাকবে, ধরা যাক a আর b । যার মানে দাঁড়াবে Bob এর a তম ভাতিজা b তম ভাতিজার থেকে বড়। তোমাকে প্রত্যেকটা ইন্স্ট্রাকশন দেয়ার পড়ে বলতে হবে এখন পর্যন্ত পাওয়া তথ্য সত্যি কিনা।  পুরো প্রব্লেমটি &lt;a href=&quot;/assets/pdf/bob-and-his-nephews-r3-en.pdf&quot;&gt;এখানে&lt;/a&gt; পাওয়া যাবে।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Solution:&lt;/strong&gt; এই প্রব্লেমটা সল্ভ করার জন্য আমরা একটু গ্রাফ থিওরির ধারনা ব্যাবহার করতে পারি। ধরা যাক Bob এর ভাতিজারা হচ্ছে একেকটা নোড আর একটা করে ইন্স্ট্রাকশন $&amp;lt;a,b&amp;gt;$ দেয়া মানে হলো a  থেকে b তে একটা এজ আছে। a থেকে b তে যাওয়া যাবে। এটার মানে এই না, যে b থেকেও a তে যাওয়া যাবে। তার মানে একটা Directed Graph বানাতে থাকবো আমরা। আর এই গ্রাফটি কখন Invalid হবে? যখন ওই ডিরেক্টেড গ্রাফে এক বা একাধিক সাইকেল থাকবে। কারন একটা সাইকেল থাকা মানে হলো ঘুরে ঘুরে নিজেই নিজের থেকে বড় হয়ে যাওয়া। না বুঝে থাকলে খাতায় এঁকে দেখলেই পরিষ্কার হবে। তাহলে গ্রাফে সাইকেল থাকলেই ডাটা ইনভ্যালিড হয়ে যাচ্ছে। আরও একটা কথা, একবার যদি ডাটা ইনভ্যালিড হয়ে যায়, সেটি কি আর কখনো ভ্যালিড হবে? কারন তোমাকে জিজ্ঞাস করা হয়েছে &lt;strong&gt;এখন পর্যন্ত&lt;/strong&gt; দেয়া ডাটাগুলো ভ্যালিড কিনা। তাই তোমার ডাটা একবার ইনভ্যালিড হয়ে গেলে সেটি আর কখনো ভ্যালিড হবেনা। অর্থাৎ আমাদের উত্তর হবে অনেকটা এরকমঃ $…..Yes,Yes,Yes,……No,No,No…$&lt;/p&gt;

&lt;p&gt;একবার No হয়ে গেলে পরের সবগুলোই No হবে।&lt;/p&gt;

&lt;p&gt;এবার আমরা একটা একটা করে সলভ করার চেষ্টা করি।&lt;/p&gt;

&lt;h4 id=&quot;subtask-1-1&quot;&gt;Subtask 1&lt;/h4&gt;

&lt;p&gt;$n$ এর মান খুবই ছোট। আমরা একদম নেইভ ব্রুটফোর্স করে ফেলতে পারি। প্রত্যেকবার ইনপুট নেয়ার সময় $n$ বার DFS চালিয়ে চেক করে দেখব সব ঠিক আছে কিনা। এভাবে যতক্ষন একটা NO না পাচ্ছি ততক্ষন DFS করে দেখতে থাকবো। কম্প্লেক্সিটি $\mathcal O(n^2\times (n+m))$।&lt;/p&gt;

&lt;h4 id=&quot;subtask-2-1&quot;&gt;Subtask 2&lt;/h4&gt;

&lt;p&gt;আমরা আগের সাবটাস্কের মতো করে চিন্তা করে কি কোনোভাবে কম্প্লেক্সিটি কমিয়ে $\mathcal O(n^2 + (n+m))$ করা যায় না?&lt;/p&gt;

&lt;h4 id=&quot;subtask-3-1&quot;&gt;Subtask 3&lt;/h4&gt;

&lt;p&gt;আমাদের সমস্যা কোথায় হচ্ছে? ডিরেক্টেড গ্রাফে $ \mathcal O(n+m)$ বা লিনিয়ার টাইমে সাইকেল বেড় করতে পারছি না। একবার সাইকেল বেড় করতেই $n$ বার DFS চালাতে হচ্ছে। যার কারনে সমস্যা হচ্ছে। আমরা চাইলে লিনিয়ার টাইমে সাইকেল বেড় করতে পারি। &lt;a href=&quot;https://cp-algorithms.com/graph/finding-cycle.html&quot;&gt;এখান থেকে&lt;/a&gt; দেখে নাও। তাহলে আমাদের Overall কম্প্লেক্সিটি হলো $\mathcal O(n \times (m))$&lt;/p&gt;

&lt;h4 id=&quot;subtask-4&quot;&gt;Subtask 4&lt;/h4&gt;

&lt;p&gt;যেহেতু সর্বোচ্চ একটা NO থাকতে পারে, এটা খুব সহজেই বলা যায় যে শুধুমাত্র শেষ ডাটাটিই হয় ভুল হবে, নাইলে সবগুলো সঠিক। তাহলে শুধুমাত্র শেষের বার DFS করলেই তো হয়। একদম নেইভ DFS করলেও $\mathcal O(n^2+nm)$ এ করা যায়।&lt;/p&gt;

&lt;h4 id=&quot;subtask-5-1&quot;&gt;Subtask 5&lt;/h4&gt;

&lt;p&gt;এখানে একটি জিনিস লক্ষ্যনীয়। আমাদের উত্তরটিতে প্রথমে বেশ কিছু YES থাকবে, তারপর একবার NO হয়ে গেলে বাকি সব NO। তাহলে আমরা চাইলে সর্বপ্রথম NO খুঁজে বেড় করতে পারি। ব্যাপারটি হলো, ধরা যাক আমরা বেড় করেছি সর্বপ্রথম NO আছে $x$ তম ইন্ডেক্সে। তাহলে $1$ থেকে $x-1$ পর্যন্ত উত্তর হবে YES , আর $x$ থেকে $m$ পর্যন্ত উত্তর হবে NO। এই কাজটি আমরা চাইলে কি বাইনারি সার্চ করে বেড় করতে পারি না ? আমরা যদি অর্ধেক এজ নিয়ে একটা DFS চালাই আর দেখি সাইকেল পাওয়া গেছে তাহলে আর ডানে না গিয়ে বামে সাইকেল খুজঁবো। আর যদি দেখি সাইকেল পাওয়া যাচ্ছে না তাহলে ডানে খুঁজবো। তাহলে আমাদের সর্বোচ্চ $log(m)$ বার DFS করতে হচ্ছে। ওভারঅল কম্প্লেক্সিটি $\mathcal O((n+m) \times \log m)$&lt;/p&gt;

&lt;p&gt;কোডটি দিয়ে দিচ্ছিঃ&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//cout &amp;lt;&amp;lt; &quot; # &quot; &amp;lt;&amp;lt;  mid &amp;lt;&amp;lt; endl;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// we will print YES from 1...ans-1 and NO for rest of them. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;problem-4&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;a name=&quot;problem4&quot;&gt;Problem 4&lt;/a&gt;&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;এই প্রব্লেমটির জন্য &lt;a href=&quot;https://www.facebook.com/profile.php?id=100009412935900&quot;&gt;শাফিন আলমকে&lt;/a&gt; অসংখ্য ধন্যবাদ। প্রব্লেমটি তার বানানো।&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Description:&lt;/strong&gt; একটি $n \times m$ গ্রিড দেয়া আছে, তোমাকে এমন দুটি পাথ বেড় করতে হবে, যেন পাথ দুটির মধ্যে কোনো কমন নোড না থাকে আর এদের পাথের sum যেন সর্বোচ্চ হয়। তবে প্রথম আর শেষ নোড তো কমন থাকবেই, ওটা আলাদা। সম্পূর্ন প্রব্লেম &lt;a href=&quot;/assets/pdf/thinking-about-a-geometry-problem-r1-en.pdf&quot;&gt;এখানে&lt;/a&gt; পাওয়া যাবে।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Solution:&lt;/strong&gt; এটি দেখেই বোঝা যাচ্ছে একটি ডিপি প্রব্লেম। আমরা একটা একটা করে সাবটাস্ক সল্ভ করি।&lt;/p&gt;

&lt;h4 id=&quot;subtask-1-2&quot;&gt;Subtask 1&lt;/h4&gt;

&lt;p&gt;$m = 2$, যার মানে মূলত এখানে সর্বোচ্চ দুটি পাথই পাওয়া যাবে, নিচের row আর উপরের row. যার মানে দাড়াচ্ছে গ্রিডের সবগুলো ভ্যালু যোগ করে দিলেই উত্তর হয়ে যাবে।&lt;/p&gt;

&lt;h4 id=&quot;subtask-2-2&quot;&gt;Subtask 2&lt;/h4&gt;

&lt;p&gt;এখানে $n$ এর মান এতই কম যে শুধুমাত্র রিকার্শন দিয়ে সল্ভ করা সম্ভব। আমরা একবার গিয়ে আলাদা রাস্তায় ফিরে আসাকে ওভাবে কল্পনা না করে যদি চিন্তা করি, দুইবার উপর থেকে নিচে আলাদা রাস্তায় যাবো, তাহলেই হয়ে যাচ্ছে। আমরা রিকার্শন করে All possible solution বেড় করবো আর তার থেকে সবথেকে বড় sum টাকে নিব। যেহেতু $n,m \leq 9$, এটা কোনোমতে কাজ করবে।&lt;/p&gt;

&lt;h4 id=&quot;subtask-3-2&quot;&gt;Subtask 3&lt;/h4&gt;

&lt;p&gt;এখানে $n,m \leq 50$, তাই ডিপি না করে আর উপায় নেই। ডিপি খুবই সহজ। আমরা 4 টা স্টেট রাখবো ডিপিতে। $dp(x_1,y_1,x_2,y_2)$ । এবার জাস্ট আমরা একবার প্রথম পাথে ডানে/নিচে আর দ্বিতীয় পাথে ডানে/নিচে গিয়ে ডিপি করতে থাকবো। আর ম্যাক্সিমাম নিতে থাকবো। আর আমাদের পাথ intersect করলো কিনা সেটাও চেক করা লাগবে। টাইম কম্প্লেক্সিটি $\mathcal O(n^2*m^2) \approx O(n^4)$ আর মেমরি কম্প্লেক্সিটিও $\mathcal O(n^4)$।&lt;/p&gt;

&lt;h4 id=&quot;subtask-4-1&quot;&gt;Subtask 4&lt;/h4&gt;

&lt;p&gt;$n,m \leq 100$, যার মানে আমাদের এখানেও $\mathcal O(n^4)$ টাইম কম্প্লেক্সিটিতেও কোনো সমস্যা হওয়ার কথা না। কিন্তু সমস্যা হলো মেমরি কম্প্লেক্সিটিতে। $10^8$ পরিমান মেমরি নেয়া আমাদের পক্ষে সম্ভব নয়। তাই আমাদের স্টেট কমাতে হবে। এখানে একটা লক্ষ্যনীয় ব্যাপার আছে। আমরা প্রত্যেকবার রিকার্শনে প্রথম পাথে এক ডানে বা এক নিচে যাচ্ছি, আবার দ্বিতীয় পাথে এক ডানে বা নিচে যাচ্ছি, যার মানে $x_1+y_1$ আর $x_2+y_2$ সর্বদা সমান। তাহলে আমাদের যদি $x_1,y_1,x_2$ দেয়া থাকে তাহলে আমরা বলতে পারি $y_2 = x_1+y_1-x_2$। তাহলে আমাদের মূলত ডিপিতে আর $y_2$ রাখতে হচ্ছেনা। তাহলে মেমরি কম্প্লেক্সিটি হয়ে গেল $\mathcal O(n^3)$ আর টাইম কম্প্লেক্সিটি $\mathcal O(n^3)$, যা 100 পয়েন্ট পাওয়ার জন্য যথেষ্ট। কোড দিয়ে দিচ্ছি।&lt;/p&gt;

&lt;p&gt;‍‍‍&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ll stands for [long long int] &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// here we're calculating y from (i,r,x)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// path intersected &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;সবাইকে ধন্যবাদ।&lt;/p&gt;</content><author><name>Ahnaf Shahriar Asif</name></author><category term="Contest analysis" /><summary type="html">Problems</summary></entry><entry><title type="html">Z Function</title><link href="http://localhost:4000/2019/07/04/z-function.html" rel="alternate" type="text/html" title="Z Function" /><published>2019-07-04T00:00:00+06:00</published><updated>2019-07-04T00:00:00+06:00</updated><id>http://localhost:4000/2019/07/04/z-function</id><content type="html" xml:base="http://localhost:4000/2019/07/04/z-function.html">&lt;h3&gt;&lt;font color=&quot;#4459c9&quot;&gt; Introduction &lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;ধরি আমাদের একটি স্ট্রিং $s$ দেয়া আছে। স্ট্রিংটির দৈর্ঘ্য $|s|$ ওই স্ট্রিং $s$ এর জন্য $z$-ফাংশন হচ্ছে একটি $|s|$ সাইজের অ্যারে, যেখানে $i$ তম উপাদান $z[i]$ হচ্ছে একটা স্বাভাবিক সংখ্যা, যেটা নির্দেশ করে $s$ এর $i$ তম ইনডেক্স থেকে শুরু করে সর্বোচ্চ কত বড় &lt;a href=&quot;https://en.wikipedia.org/wiki/Substring#Substring&quot;&gt;সাবস্ট্রিং&lt;/a&gt; নেওয়া যাবে যেন সেটা $s$ এর &lt;a href=&quot;https://en.wikipedia.org/wiki/Substring#Prefix&quot;&gt;প্রিফিক্স&lt;/a&gt; হয়।&lt;/p&gt;

&lt;p&gt;এই আর্টিকেলটিতে আমি ভেজাল এড়ানোর উদ্দেশ্যে সবকিছুর জন্য $0$-বেসড ইন্ডেক্স ধরে নিব ।&lt;/p&gt;

&lt;p&gt;$z$-ফাংশনের প্রথম উপাদান এর ব্যাপারে নির্দিষ্ট করে কিছু নেই। এটা তেমন গুরুত্বপূর্ণ কিছু নয়। 😕 কারণ শূন্য থেকে শুরু করলে পুরোটা স্ট্রিংয়ের প্রিফিক্স এর সাথে সর্বদা ম্যাচ করবে। আমরা এখানে $z[0] =0 $ ধরে নিতে পারি।
এই আর্টিকেলে  আমি  $z$-ফাংশন $O(n)$ কম্প্লেক্সিটি তে ক্যালকুলেট করার  অ্যালগরিদম ও দেখাবো।&lt;/p&gt;

&lt;h3&gt; &lt;font color=&quot;#4459c9&quot;&gt; Examples &lt;/font&gt; &lt;/h3&gt;
&lt;p&gt;উদাহরণ হিসেবে, নিচে কিছু স্ট্রিং এর $z$-ফাংশনের সবগুলো মান বের করে দেওয়া হলো: 😀&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“$aaaaa$” - $[0,4,3,2,1]$&lt;/li&gt;
  &lt;li&gt;“$aaabaab$” - $[0,2,1,0,2,1,0]$&lt;/li&gt;
  &lt;li&gt;“$abacaba$” - $[0,0,1,0,3,0,1]$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt; &lt;font color=&quot;#4459c9&quot;&gt; Trivial Algorithm &lt;/font&gt; &lt;/h3&gt;
&lt;p&gt;ডেফিনেশন থেকে চাইলে নুবের মতো $O(n^2)$ কোড লিখে ফেলা যায়। 😒&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_function_trivial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;আমরা শুধু প্রতিটা পজিশন $i$ এর জন্য লুপ চালিয়ে যতক্ষণ স্ট্রিংটির প্রিফিক্সের সাথে মিলতে থাকবে ততক্ষণ পর্যন্ত $z[i]$  এর মান বাড়াতে থাকবো।  এটা অবশ্যই ফালতু একটা অ্যালগোরিদম। এই টাইম কম্প্লেক্সিটির চেয়ে অনেক ভালোভাবে $z$-ফাংশন ক্যালকুলেট করা যায়। এবার আমরা সেটা দেখবো। 😍&lt;/p&gt;

&lt;h3&gt; &lt;font color=&quot;#4459c9&quot;&gt; Efficient algorithm to compute the Z-function &lt;/font&gt; &lt;/h3&gt;
&lt;p&gt;একটা এফিশিয়েন্ট অ্যালগরিদম তৈরি করার জন্য আমরা $z[i]$ এর মানগুলো $i=1$ থেকে $n-1$ পর্যন্ত কম্পিউট করবো। কিন্তু  আমরা চেষ্টা করব আগের কম্পিউট করা মানগুলো কে যতটা সম্ভব কাজে লাগানোর।&lt;/p&gt;

&lt;p&gt;ঝামেলা এড়ানোর জন্য আমরা “সেগমেন্ট ম্যাচ”  বলতে ওই সাবস্ট্রিং গুলোকে বুঝাবো যেগুলো $s$ এর কোন একটি প্রিফিক্স এর সাথে ম্যাচ করে। যেমন, $z$-ফাংশনের ভ্যালু $z[i]$ হচ্ছে ওই সেগমেন্ট ম্যাচের দৈর্ঘ্য যা $i$ তে শুরু এবং $i+z[i]-1$ এ শেষ।&lt;/p&gt;

&lt;p&gt;এটা করার জন্য আমরা $l$ ও $r$ রাখবো যেই $[l:r]$ রেঞ্জটি নির্দেশ করবে $r$ এ শেষ এমন একটি সেগমেন্ট ম্যাচ $l$ এ শুরু। আরেকভাবে $r$ একটা বাউন্ডারি হিসেবে দেখা যায় যেটা নির্দেশ করে যে এতোটুকু পর্যন্ত আমাদের কাজ করা হয়েছে এবং এর পরের সবকিছু এখনো পর্যন্ত আমাদের অজানা।&lt;/p&gt;

&lt;p&gt;এখন, মনে করি আমরা $i$ তম ইনডেক্সে আছি।  এখন আমাদের $z[i]$ এর মান ক্যালকুলেট করতে হবে। এক্ষেত্রে দুটি কেস থাকতে পারে।&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;$i&amp;gt;r$ – বর্তমান ইনডেক্সটি আমরা যতটুকু পর্যন্ত প্রসেস করেছি এর বাইরে।
এক্ষেত্রে আমরা ট্রিভিয়াল এলগরিদম এর মতই জাস্ট লুপ চালিয়ে একটি একটি করে ভ্যালু চেক করতে থাকবো।  এখানে এই জিনিসটা খেয়াল রাখতে হবে যে আমাদের $r$ এর মান পরিবর্তন করতে হবে কারণ এটা নিশ্চিত যে $r$ এর বর্তমান মান আগের $r$ এর চেয়ে বেশি হবে।&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$ i \leq r$ –  বর্তমান পজিশনটা আমরা যতটুকু প্রসেস করেছি এর ভিতর।
এখন আমরা আগের ক্যালকুলেট করা $z[]$ এর মান গুলোর সাহায্যে $z[i]$ তে কোন একটা মান এসাইন করব । তারপর আমরা ওই মান থেকে কাজ করা শুরু করব। এটা অবশ্যই $0$ থেকে কাজ শুরু করার চেয়ে ভালো। আমরা একটু খেয়াল করলেই দেখতে পাবো যে $s[l…….r]$ এবং $s[0…….r-l]$ কিন্তু পুরোপুরি ম্যাচ করবে। এটা কেন হবে এটা  আমরা কিছুটা চিন্তা করলেই বুঝতে পারব।&lt;/p&gt;

    &lt;p&gt;$[0,  r-l]$ অংশটির $z$-ভেলু আগে থেকেই ক্যালকুলেট করা আছে। তাই আমরা চাইলে $z[i]$ এর ভ্যালু হিসেবে $z[i-l]$ কে ধরে নিতে পারি।&lt;/p&gt;

    &lt;p&gt;কিন্তু এখানে একটি বিষয় আছে,  $z[i-l]$ এর মান অনেক বড় হয়ে যেতে পারে।  যে সেটা যদি $i$ এর $z$-ভ্যালু হয় তাহলে তা $i$ এর সাথে যুক্ত করলে $r$ এর চেয়ে বেশি হয়ে যায়। কিন্তু আমরা $r$ এর ডান এর মান গুলো সম্পর্কে কিছুই জানিনা। এটি মিলতে পারে, নাও মিলতে পারে। তাই আমরা $z[i]$ এর মান এত বেশি নিতে পারব না যে তা বর্তমান পজিশন এর সাথে যুক্ত করলে $r$ বেশি হয়ে যায় অর্থাৎ $i+z[i] &amp;gt; r$ হয়ে যায়। 
একটি উদাহরণ হতে পারে এমন:&lt;/p&gt;

    &lt;p&gt;​												$s =$ “$ aaaabaa$”&lt;/p&gt;

    &lt;p&gt;যখন আমরা শেষের আগের পজিশনে পৌঁছাব $(i=6)$,  আমরা দেখতে পাচ্ছি যে বর্তমান সেগমেন্ট ম্যাচ হচ্ছে $[5:6]$, $6$ পজিশনটি তাহলে $6-5=1$ এর সাথে ম্যাচ করবে যেটার $z$-ফাংশনের মান হচ্ছে $z[1]=3$। অবশ্যই আমরা $z[6]$ এ $3$ এসাইন করতে পারি না কারন তাহলে এটা সম্পূর্ণ ভুল হবে। সর্বোচ্চ যে ভ্যালু আমরা নিতে পারি সেটা হচ্ছে 1।  কারণ এটাই সর্বোচ্চ মান যেটা নিলেও $i+z[i]$ এর মান $r$ পার হবে না। তাই প্রাথমিকভাবে আমরা $z[i]$ এর মানে নিশ্চিত ভাবে এটা নিতে পারি:&lt;/p&gt;

    &lt;p&gt;​									$z[i] = min(r-i+1, z[i-l])$&lt;/p&gt;

    &lt;p&gt;প্রাথমিকভাবে মান বসানোর পর আমরা ট্রিভিয়াল অলগোরিদমের মতো লুপ চালিয়ে চেক করব তারপর আর কতটুকু ম্যাচ করে।&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;তাই এই অ্যালগরিদম টা মূলত দুই ভাগে বিভক্ত,  যেগুলো শুধু $z[i]$ এর প্রাথমিক মান কত হবে সেটা দিয়ে আলাদা। প্রথম কেস এর ক্ষেত্রে আমরা প্রাথমিক মান হিসেবে 0 ধরে নেই। দ্বিতীয় ক্ষেত্রে আমরা পূর্ববর্তী ক্যালকুলেট করা মানগুলো কে বিবেচনা করে একটি ভ্যালু এসাইন করি। তারপর আমরা উভয় ক্ষেত্রেই ট্রিভিয়াল অ্যালগরিদম টি ব্যবহার করে বাকি মানগুলো ক্যালকুলেট করি।&lt;/p&gt;

&lt;p&gt;কম্প্লেক্সিটি তুলনায় অ্যালগরিদমটি আসলে খুবই সরল. এখন অনেকের মনে সন্দেহ জাগতে পারে যে আমরা প্রতিটি ইন্ডেক্স এর জন্য ট্রিভিয়াল অ্যালগরিদম চালালাম, তাহলে কম্প্লেক্সিটি লিনিয়ার হলো কিভাবে। আমরা ইম্প্লেমেন্টেশন এর পরেই এটার প্রমাণ দেখব ।&lt;/p&gt;

&lt;h3&gt; &lt;font color=&quot;#4459c9&quot;&gt; Implementation &lt;/font&gt; &lt;/h3&gt;
&lt;p&gt;অ্যালগোরিদমের পিছনের আইডিয়ায় তুলনায় ইম্প্লিমেনটেশন খুবই ছোট&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Munim Hasan Wasi</name></author><category term="Data Structures" /><category term="Strings" /><summary type="html">Introduction ধরি আমাদের একটি স্ট্রিং $s$ দেয়া আছে। স্ট্রিংটির দৈর্ঘ্য $|s|$ ওই স্ট্রিং $s$ এর জন্য $z$-ফাংশন হচ্ছে একটি $|s|$ সাইজের অ্যারে, যেখানে $i$ তম উপাদান $z[i]$ হচ্ছে একটা স্বাভাবিক সংখ্যা, যেটা নির্দেশ করে $s$ এর $i$ তম ইনডেক্স থেকে শুরু করে সর্বোচ্চ কত বড় সাবস্ট্রিং নেওয়া যাবে যেন সেটা $s$ এর প্রিফিক্স হয়।</summary></entry><entry><title type="html">Convex Hull</title><link href="http://localhost:4000/2019/07/02/convex-hull.html" rel="alternate" type="text/html" title="Convex Hull" /><published>2019-07-02T00:00:00+06:00</published><updated>2019-07-02T00:00:00+06:00</updated><id>http://localhost:4000/2019/07/02/convex-hull</id><content type="html" xml:base="http://localhost:4000/2019/07/02/convex-hull.html">&lt;p&gt;আজকে আমরা অনেকগুলো কার্তেসিয় স্থানাঙ্ক দেওয়া থাকলে সেটার কনভেক্স হাল বের করা শিখবো।&lt;/p&gt;

&lt;font color=&quot;#02b300&quot;&gt; কনভেক্স হাল:&lt;/font&gt;
&lt;p&gt;ধরি আমাদের কাছে &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; টা পয়েন্ট দেওয়া আছে। আমাদের উদ্দেশ্য হচ্ছে এমন ক্ষুদ্রতম &lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_polygon&quot;&gt;উত্তল বহুভুজ&lt;/a&gt; তৈরি করা যেটার মধ্যে সবগুলো পয়েন্ট আছে। এটাকেই ওই পয়েন্টগুলোর কনভেক্স হাল বলা হয়।&lt;/p&gt;

&lt;font color=&quot;#02b300&quot;&gt; অ্যালগোরিদম: &lt;/font&gt;
&lt;p&gt;এখানে আমি গ্রাহাম স্ক্যান অ্যালগোরিদম ব্যবহার করে কনভেক্স হাল কিভাবে তৈরি করতে হয় সেটা দেখাবো। গ্রাহাম স্ক্যান এ শুধু কম্পেরিজন, যোগ আর গুন ব্যবহার করেই &lt;script type=&quot;math/tex&quot;&gt;O(N logN)&lt;/script&gt; এ কনভেক্স হাল বের করা যায়। কনভেক্স হাল বের করার জন্য এটিই সবচেয়ে ভালো কম্প্লেক্সিটি। এটা প্রমাণ করা যায় যে এটার চেয়ে ভালো কম্প্লেক্সিটিতে কনভেক্স হাল বের করা যায় না।&lt;/p&gt;

&lt;h3&gt; &lt;font color=&quot;#4459c9&quot;&gt; Description &lt;/font&gt; &lt;/h3&gt;
&lt;p&gt;এই অ্যালগোরিদমটি প্রথমেই “সবচেয়ে নিচে ও সবচেয়ে বামে” এর পয়েন্ট &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; এবং “সবচেয়ে উপরে ও সবচেয়ে ডানে” এর পয়েন্ট &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; খুঁজে বের করে। এটা স্পষ্ট যে &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; আর &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; দুটোই কনভেক্স হালে অন্তর্ভুক্ত হবে। কারণ যেহেতু এই দুইটি পয়েন্ট সবচেয়ে দূরে অবস্থিত, বাকি সবগুলো পয়েন্ট থেকে এমন ভাবে দুটি পয়েন্ট নেয়া সম্ভব হবে না যে পয়েন্টদুটোর সংযোগরেখা &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; অথবা &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; কে কনভেক্স হালের ভিতরের দিকে ফেলে।&lt;/p&gt;

&lt;p&gt;এখন আমরা &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; ও &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; এর সংযোজক একটা রেখা কল্পনা করি। এই রেখাটি সবগুলো পয়েন্টকে দু’টি সেটে ভাগ করে। ধরি, সেট দুটি &lt;script type=&quot;math/tex&quot;&gt;S_1&lt;/script&gt;ও &lt;script type=&quot;math/tex&quot;&gt;S_2&lt;/script&gt; । &lt;script type=&quot;math/tex&quot;&gt;S_1&lt;/script&gt; হচ্ছে সেসব পয়েন্টগুলো যেগুলা &lt;script type=&quot;math/tex&quot;&gt;AB&lt;/script&gt; লাইনের উপরে আছে আর &lt;script type=&quot;math/tex&quot;&gt;S_2&lt;/script&gt; হচ্ছে সেই পয়েন্টগুলা যেগুলা &lt;script type=&quot;math/tex&quot;&gt;AB&lt;/script&gt; লাইনের নিচে আছে। যেই পয়েন্টগুলা &lt;script type=&quot;math/tex&quot;&gt;AB&lt;/script&gt; লাইনের মধ্যে পরেছে যেগুলাকে যেকোনো একটাতে রাখলেই হবে। &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; আর &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; পয়েন্ট দুটি উভয় সেটেই থাকবে। অ্যালগোরিদমটি প্রথমে &lt;script type=&quot;math/tex&quot;&gt;S_1&lt;/script&gt; সেটের পয়েন্টগুলা থেকে কনভেক্স হালের উপরের পার্ট টা তৈরি করে আর &lt;script type=&quot;math/tex&quot;&gt;S_2&lt;/script&gt; পয়েন্টগুলা থেকে কনভেক্স হালের নিচের পার্টটা তৈরি করে। তারপর দুইটা পার্টকে একসাথে জুড়ে দিলেই তৈরি হয়ে গেলো আমাদের সুন্দর কনভেক্স হাল। 😍&lt;/p&gt;

&lt;p&gt;কিন্তু ওয়েট, এতো সোজা নাকি? কোথায় যেনো একটা গাফলা মনে হচ্ছে। হ্যাঁ। এখন উপরের পার্টের কনভেক্স হালটাই বা কিভাবে হবে 😨।&lt;/p&gt;

&lt;p&gt;উপায় কিন্তু আছে । 😀 উপরের সেটটা পাওয়ার জন্য আমরা প্রথমে &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; কো-অর্ডিনেট দিয়ে সবগুলো পয়েন্ট কে সর্ট করব। কনভেক্স হালের উপরের পার্টের প্রথম পয়েন্ট টা হবে &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; ও শেষ পয়েন্ট টা হবে &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;। আমরা দেখব যে বর্তমানে আমরা যে পয়েন্টে আছি সেটা &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; কি না। যদি &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; হয় তার মানে আমাদের কাজ শেষ। এখন আমাদের মাথায় এই চিন্তা টা আসতে পারে যে, আমরা শুধুমাত্র উপরের হাল টা বানানোর জন্য সব গুলো পয়েন্ট নিয়ে কাজ করছি। তাহলে তো এমন পয়েন্টগুলো চলে আসবে যেগুলো &lt;script type=&quot;math/tex&quot;&gt;AB&lt;/script&gt; লাইনের নিচে। তাহলে তো ঝামেলা &lt;script type=&quot;math/tex&quot;&gt;!&lt;/script&gt; ঝামেলা দূর করার জন্য আমরা &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;P_{current}&lt;/script&gt; এবং &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; এর মধ্যে অরিয়েন্টেশন চেক করতে পারি। মানে যদি &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;    -&amp;gt;  &lt;script type=&quot;math/tex&quot;&gt;P_{current}&lt;/script&gt;   -&amp;gt;  &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; পথটি ক্লক ওয়াইজ হয় তার মানে &lt;script type=&quot;math/tex&quot;&gt;P_{current}&lt;/script&gt; পয়েন্টটি &lt;script type=&quot;math/tex&quot;&gt;AB&lt;/script&gt; লাইনের উপরে আছে। তাহলে পয়েন্টটি &lt;script type=&quot;math/tex&quot;&gt;S_1&lt;/script&gt; সেটেই পড়বে।&lt;/p&gt;

&lt;p&gt;যদি &lt;script type=&quot;math/tex&quot;&gt;P_{current}&lt;/script&gt; পয়েন্টটি &lt;script type=&quot;math/tex&quot;&gt;S_1&lt;/script&gt; সেটেই থাকে, তাহলে আমরা পয়েন্ট &lt;script type=&quot;math/tex&quot;&gt;P_{current}&lt;/script&gt; এবং এই পর্যন্ত বানানো কনভেক্স হালের শেষ পয়েন্ট &lt;script type=&quot;math/tex&quot;&gt;hull_{last}&lt;/script&gt; এবং তার আগের পয়েন্ট &lt;script type=&quot;math/tex&quot;&gt;hull_{last-1}&lt;/script&gt; গুলো নিবো। এবার &lt;script type=&quot;math/tex&quot;&gt;hull_{last-1}&lt;/script&gt; -&amp;gt; &lt;script type=&quot;math/tex&quot;&gt;hull_{last}&lt;/script&gt; ও &lt;script type=&quot;math/tex&quot;&gt;hull_{last}&lt;/script&gt; -&amp;gt; &lt;script type=&quot;math/tex&quot;&gt;P_{current}&lt;/script&gt; এই দুটি রেখা আঁকবো। এই রেখা দুটি &lt;script type=&quot;math/tex&quot;&gt;hull_{last}&lt;/script&gt; বিন্দুতে ছেদ করে। এখন আমরা রেখাদ্বয় দ্বারা উৎপন্ন কোণটি চেক করবো। যদি এই কোণটি ক্লকওয়াইজ হয়, আমরা বর্তমান পয়েন্ট টিকে হালে যুক্ত করে দিতে পারি। আর এন্টি-ক্লকওয়াইজ হলে আমরা হালের লাস্ট পয়েন্টটিকে ডিলিট করে দিব। এবং &lt;script type=&quot;math/tex&quot;&gt;P_{current}&lt;/script&gt; পয়েন্টটিকে হালে যুক্ত করবো। কারণ, &lt;script type=&quot;math/tex&quot;&gt;hull_{last-1}&lt;/script&gt; এবং &lt;script type=&quot;math/tex&quot;&gt;P_{current}&lt;/script&gt; রেখাটি সেক্ষেত্রে &lt;script type=&quot;math/tex&quot;&gt;hull_{last}&lt;/script&gt; পয়েন্টটিকে কাভার করতে পারবে।&lt;/p&gt;

&lt;p&gt;একই লজিকে আমরা হালের নিচের  অংশটুকুও তৈরি করে ফেলতে পারি। এক্ষেত্রে শুধু ক্লকওয়াইজ আর এন্টি-ক্লকওয়াইজ এর ব্যবহারটা উল্টে যাবে। আগের ক্ষেত্রে  ক্লক ওয়াইজ হলে যুক্ত করে দিতাম এবং এন্টি ক্লকওয়াইজ হলে ডিলিট করে দিতাম।  নিচের হাল বানানোর ক্ষেত্রে এন্টি ক্লকওয়াইজ হলে যুক্ত করে দিতে হবে এবং ক্লকওয়াইজ হলে ডিলিট করে দিতে হবে।
এবার, উপরের আর নিচের হালটা যুক্ত করে দিলেই তৈরি হয়ে গেল আমাদের সুন্দর কনভেক্স হাল। এটার &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt;++ ইম্প্লেমেন্টেশন করা যেতে পারে এভাবে ।&lt;/p&gt;

&lt;h3&gt; &lt;font color=&quot;#4459c9&quot;&gt;Implementation&lt;/font&gt; &lt;/h3&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ccw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convex_hull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ccw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt; &lt;font color=&quot;100680&quot;&gt;Practice Problems&lt;/font&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://open.kattis.com/problems/convexhull&quot;&gt;Kattis - Convex Hull&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://open.kattis.com/problems/parade&quot;&gt;Kattis - Keep the Parade Safe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1185&quot;&gt;Timus 1185: Wall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://usaco.org/index.php?page=viewproblem2&amp;amp;cpid=382&quot;&gt;Usaco 2014 January Contest, Gold - Cow Curling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Munim Hasan Wasi</name></author><category term="Geometry" /><summary type="html">আজকে আমরা অনেকগুলো কার্তেসিয় স্থানাঙ্ক দেওয়া থাকলে সেটার কনভেক্স হাল বের করা শিখবো।</summary></entry><entry><title type="html">Dp on Trees</title><link href="http://localhost:4000/2019/06/29/dp-on-trees.html" rel="alternate" type="text/html" title="Dp on Trees" /><published>2019-06-29T00:00:00+06:00</published><updated>2019-06-29T00:00:00+06:00</updated><id>http://localhost:4000/2019/06/29/dp-on-trees</id><content type="html" xml:base="http://localhost:4000/2019/06/29/dp-on-trees.html">&lt;h2 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;আমরা আশা করি প্রাথমিক ডিপি বেশ ভালোভাবেই পারি, ডিপির স্টেট বেরকরতে পারি, ডিপি রিকার্শন বেড় করতে পারি। যদি তুমি না পারো তাহলে &lt;a href=&quot;https://duoblogger.github.io/2019/06/28/basic-dynamic-programming.html&quot;&gt;এটি&lt;/a&gt; দেখতে পারো। এরপর আমরা সামনের দিকে আগাবো। নরমাল ডিপি আমরা অ্যারে এর উপর করেছি। এবার একই জিনিস ট্রি এর উপর করবো। খুবই সাধারণ ব্যাপার। আমরা খুব কঠিনভাবে শুরু করবোনা অবশ্যই, তবে ট্রি ডিপির অনেক অনেক কঠিন প্রব্লেম আছে। আমরা আস্তে আস্তে সেগুলো সমাধান করতে শিখবো। কথা না বাড়িয়ে চলো শুরু করা যাক।&lt;/p&gt;

&lt;h3 id=&quot;pre-requirements&quot;&gt;Pre-requirements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://duoblogger.github.io/2019/06/28/basic-dynamic-programming.html&quot;&gt;Basic Dynamic Programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.shafaetsplanet.com/?p=143&quot;&gt;Basic Graph Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.shafaetsplanet.com/?p=604&quot;&gt;BFS&lt;/a&gt;  ,  &lt;a href=&quot;http://www.shafaetsplanet.com/?p=848&quot;&gt;Topsort&lt;/a&gt;  ,  &lt;a href=&quot;http://www.shafaetsplanet.com/?p=973&quot;&gt;DFS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/data_structures_algorithms/tree_data_structure.htm&quot;&gt;Different Definitions about trees&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problem-1-&quot;&gt;Problem 1 &lt;a name=&quot;problem1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;তোমাকে একটি ট্রি দেয়া আছে, তোমাকে ট্রি এর এমন দুটি নোড বের করতে হবে যাদের মধ্যকার দূরত্ব সবথেকে বেশি। তোমাকে আপাতত দুরত্ব বের করলেই হবে, নোড দুটি বের করার দরকার নেই। তুমি কি এটা বের করতে পারবে?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;এই প্রব্লেমটি ক্লাসিক প্রব্লেম। এই ম্যক্সিমাম ডিস্টেন্সকে ট্রির ডায়ামিটার বলে। এটার সলুশন নিজে বের করার চেষ্টা করো। না পারলে &lt;a href=&quot;http://www.shafaetsplanet.com/?p=521&quot;&gt;এই টিউটোরিয়াল&lt;/a&gt; থেকে দেখে নাও।&lt;/p&gt;

&lt;p&gt;এখন ধরে নিচ্ছি তোমরা দুটি DFS চালিয়ে কীভাবে ডায়ামিটার বের করতে হয় সেটা প্রমাণসহ বোঝো। তাহলে নিচের দিকে যাও, প্রব্লেমটাকে একটু কঠিন করে দিচ্ছি।&lt;/p&gt;

&lt;h3 id=&quot;variant-1-&quot;&gt;Variant 1 &lt;a name=&quot;problem1variant1&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;এই ক্ষেত্রে ট্রি এর এজগুলোর কস্ট(cost) আছে, অর্থাৎ, ট্রি টি ওয়েটেড। তার উপর এজের ওয়েট নিগেটিভ হতে পারে। এবার ডায়ামিটার বের কর। নিচে সলুশন দেখার আগে চিন্তা করে দেখো। আমাদের আগের সলুশনটি কি কাজ করবে? কাজ করলে কেনো করবে? আর কাজ না করলে কেনো করবেনা?&lt;/p&gt;

&lt;p&gt;আমরা দুটি DFS দিয়ে কি করেছি? প্রথমে random নোড থেকে একটা DFS চালিয়ে সেখান থেকে সবথেকে দূরের নোডগুলো বের করেছি, তারপর সবথেকে দূরের যেকোনো একটি নোড থেকে আরেকবার DFS চালিয়েছি। তাতেই ম্যাক্সিমাম পেয়ে গেছি, তাই না? কিন্তু নিচের ট্রিতে প্রথম DFS টা &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; থেকে চালালে কি হয় খেয়াল করো তো!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_images/tree_dp_2.png&quot; alt=&quot;tree-dp-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;দেখা যাবে প্রথম DFS এ e নোড থেকে d নোড সবথেকে দূরের। তাই দ্বিতীয় DFS টা d নোড থেকে চালিয়ে আমরা ম্যাক্সিমাম পাবো &lt;script type=&quot;math/tex&quot;&gt;27&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;[path\space  ( d-e-b-a) ]&lt;/script&gt;  । কিন্তু আমরা যদি প্রথম DFS টা আন্য কোনো নোড থেকে চালাতাম, তাহলে ডায়ামিটার পেতাম &lt;script type=&quot;math/tex&quot;&gt;28\ [path\ (a-b-c)]&lt;/script&gt; । সুতরাং, আমরা এই ক্ষেত্রে প্রাথমিক DFS এ কোন নোডকে রুট ধরবো, তার উপর অনেক কিছু নির্ভর করবে। তাই এভাবে বের করা যাবেনা ডায়ামিটার। আসলে যাবে, আমরা সব নোড থেকে চালিয়ে দেখতে পারি, কিন্তু তাতে &lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt; সময় লেগে যাবে। তাই সেটা করা যাবেনা। তাহলে কী করা যায়?&lt;/p&gt;

&lt;p&gt;আমরা এখন ডিপির মতো চিন্তা করবো। আমরা প্রত্যেকটা নোডের জন্য বের করবো এই নোডের সাবট্রি এর মধ্যে এই নোড দিয়ে যায় এরকম সবথেকে বড় পাথ কোনটি। নিচের ছবিটি দেখ‌ো।&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_images/tree_dp_3.png&quot; alt=&quot;tree-dp-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ছবিতে ম্যাক্সিমাম পাথের সাইজ 21 । পাথটি হচ্ছে &lt;script type=&quot;math/tex&quot;&gt;(4-7-6)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;এখানে নোড &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; এর সাবট্রির মধ্যে 1 দিয়ে যায় এরকম সবথেকে বড় পাথের সাইজ 20,  &lt;script type=&quot;math/tex&quot;&gt;path(2-1-4-7-6)&lt;/script&gt; । তাহলে আমরা যদি জানি যে প্রত্যেক নোডের জন্য ম্যাক্সিমাম পাথ কত, তাহলেই হয়ে যায়। ধর‌ &lt;script type=&quot;math/tex&quot;&gt;dp(i)&lt;/script&gt; মানে &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; নোড দিয়ে &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; এর সাবট্রির মধ্যকার ম্যাক্সিমাম পাথ। তাহলে &lt;script type=&quot;math/tex&quot;&gt;ans = max\left \{ dp(1),dp(2)....dp(n) \right \}&lt;/script&gt; ।  কিন্তু আমরা এই ম্যাক্সিমাম কীভাবে বের করবো? এজন্য আমরা প্রত্যেক নোডে ম্যাক্সিমাম আর সেকেন্ড ম্যাক্সিমাম চেইন রেখে দিব। তাহলে এদের যোগফলই হবে ওই নোডের ম্যাক্সিমাম পাথ। এটা কেন হয়? চিন্তা করে দেখ।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;প্রমাণ:&lt;/u&gt;&lt;/strong&gt; দেখ, প্রথমত চেইন দুটো আলাদা, তাই তাদের যোগ করলে নোড দিয়ে যায় এরকম একটা পাথ পাওয়া যাবে। এবার আমরা প্রমাণ করবো যে এই পাথই ম্যাক্সিমাম। ধরো আমাদের ম্যাক্সিমাম চেইন &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; আর সেকেন্ড ম্যাক্সিমাম &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; । তাহলে &lt;script type=&quot;math/tex&quot;&gt;dp(node) = a+b&lt;/script&gt; , তাই না? কিন্তু আমরা ধরে নিচ্ছি কথাটি ভুল এবং এমন দুটি চেইন &lt;script type=&quot;math/tex&quot;&gt;(x,y)&lt;/script&gt;  পাওয়া যাবে যারা ম্যাক্সিমাম/সেকেন্ড ম্যাক্সিমাম না, তারপরেও &lt;script type=&quot;math/tex&quot;&gt;x+y &gt; a+b&lt;/script&gt;  হবে। এটা প্রমাণ করতে পারলে আমাদের সলুশন ভুল প্রমাণিত হবে, অন্যথায় নয়।&lt;/p&gt;

&lt;p&gt;এখন ধরে নিচ্ছি &lt;script type=&quot;math/tex&quot;&gt;(x &gt; y)&lt;/script&gt; এবং &lt;script type=&quot;math/tex&quot;&gt;(a &gt; b)&lt;/script&gt; । যেহেতু &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; হচ্ছে ম্যাক্সিমাম সেহেতু &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; ম্যাক্সিমাম না, তাই &lt;script type=&quot;math/tex&quot;&gt;(a &gt; x)&lt;/script&gt; । আবার যেহেতু &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; দ্বিতীয় সর্বোচ্চ এবং  &lt;script type=&quot;math/tex&quot;&gt;(x  &gt; y)&lt;/script&gt;, সেহেতু, &lt;script type=&quot;math/tex&quot;&gt;(b &gt; y)&lt;/script&gt; হবে। এখন যদি  &lt;script type=&quot;math/tex&quot;&gt;(a &gt; x)&lt;/script&gt; আর &lt;script type=&quot;math/tex&quot;&gt;(b &gt; y)&lt;/script&gt; হয়, তাহলে &lt;script type=&quot;math/tex&quot;&gt;(a+b &gt; x+y)&lt;/script&gt; হবে। অর্থাৎ, এরকম কোনো &lt;script type=&quot;math/tex&quot;&gt;(x,y)&lt;/script&gt; পাওয়া সম্ভব না, যেন  &lt;script type=&quot;math/tex&quot;&gt;x+y &gt; a+b&lt;/script&gt; হয়। তাহলে প্রত্যেক নোডে ম্যাক্সিমাম আর সেকেন্ড ম্যাক্সিমাম চেইনের যোগফলই হচ্ছে ম্যাক্সিমাম পাথ। এখন এটার কোড কীভাবে করবো? খুবই সোজা। আমাদের ডিপি টেবিলে দুটো জিনিস রাখবো, একটা হচ্ছে পজিশন, আরেকটা হচ্ছে ম্যাক্স / সেকেন্ড ম্যাক্স। অর্থাৎ,&lt;script type=&quot;math/tex&quot;&gt;dp[2][n]&lt;/script&gt; । এখানে ,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[0][x] = second\max\left \{ chain(child_1),chain(child_2)...., chain(child_x) \right \} \\&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[1][x] = max\left \{ chain(child_1),chain(child_2)...., chain(child_x) \right \}&lt;/script&gt;

&lt;p&gt;কোড নিচে দিয়ে দিচ্ছি। তবো মনে রেখো, সবসময় কোড না দেখে নিজে চেষ্টা করবে, পারার পর মিলিয়ে দেখার জন্য কোড দিয়ে দিচ্ছি। আর যদি একেবারেই না পারো তাহলে প্রথম থেকে আবার পড়।&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//dp[1][..] = maximum chain&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//dp[0][..] = second maximum chain &lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;এখানে ছোট্ট একটা ভুল করেছি কোডে। নিজে বেড় করতে পারবে কি? বেড় করতে পারলে &lt;a href=&quot;https://duoblogger.github.io/contact&quot;&gt;এখানে মেইল করে&lt;/a&gt; জানাও।&lt;/p&gt;

&lt;h2 id=&quot;problem-2-&quot;&gt;Problem 2 &lt;a name=&quot;problem2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;তোমাকে একটা ট্রি দেয়া আছে। ট্রি এর প্রত্যেকটা নোডে কিছু করে ভ্যালু আছে। তুমি এই ট্রি থেকে এমনভাবে কিছু নোড নিতে পারবে যেন তাদের ভ্যালুর যোগফল সর্বোচ্চ হয়। কিন্তু তুমি একই এজের(edge) একাধিক নোড নিতে পারবেনা। অর্থাৎ, ধরো নোড a থেকে b তো সরাসরি এজ আছে। তাহল তুমি  a আর b কে একসাথে নিতে পারবেনা, যেকোনো একটা নিতে হবে। তোমাকে সর্বোচ্চ যোগফল বের করতে হবে।&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;এই প্রব্লেমটি সল্ভ করার আগে তুমি &lt;a href=&quot;https://duoblogger.github.io/2019/06/28/basic-dynamic-programming.html#problem3&quot;&gt;এই প্রব্লেমটি&lt;/a&gt; দেখে নাও। আ্যারে এর সলুশন বুঝতে পারলে তোমার জন্য এই প্রব্লেমটা বুঝতে কোনো সমস্যা হওয়ার কথা না। অ্যারেতে আগের ইন্ডেক্সের সাথে যেভাবে হিসাব করেছি, এখানে শুধু একটা নোডের চাইল্ডের সাথে হিসাবটা করবো। নিচের ছবিতে কিছুটা সিমুলেট করে দেখিয়েছি, ভালো করে খেয়াল করো, বুঝতে সুবিধা হতে পারে।&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_images/tree_dp_1.png&quot; alt=&quot;tree-dp-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ছবিটি খুব ভালো করে খেয়াল করলে বাকিটা বুঝতে অসুবিধা হবেনা। কোডটা নিজে করার চেষ্টা করো। আমি নিচে দিয়ে দিচ্ছি তাও।&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;par&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;par&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// print max(dp[0][1],dp[1][1]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to be continued….&lt;/p&gt;</content><author><name>Ahnaf Shahriar Asif</name></author><category term="Dynamic Programming" /><category term="Trees" /><summary type="html">Introduction</summary></entry><entry><title type="html">Basic Dynamic Programming(Part 1)</title><link href="http://localhost:4000/2019/06/28/basic-dynamic-programming-1.html" rel="alternate" type="text/html" title="Basic Dynamic Programming(Part 1)" /><published>2019-06-28T00:00:00+06:00</published><updated>2019-06-28T00:00:00+06:00</updated><id>http://localhost:4000/2019/06/28/basic-dynamic-programming-1</id><content type="html" xml:base="http://localhost:4000/2019/06/28/basic-dynamic-programming-1.html">&lt;!-- This is also a comment in markdown --&gt;

&lt;h2 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;আমরা ডাইনামিক প্রোগ্রামিংয়ের সাথে মোটামুটি সবাই পরিচিত। আজকে ডিপি নিয়ে কিছু বেসিক আলোচনা করবো। আশা করি উপকারে আসবে। তবে পোস্টটি অবশ্যই সবার জন্য না, যারা ডিপি কিছুটা পারেন কিন্তু প্রব্লেম সল্ভ করতে কষ্ট হচ্ছে বা কীভাবে প্রব্লেম অ্যাপ্রোচ করতে হবে সেটা বুঝে উঠতে পারছেন না, পোস্টটি তাদের জন্য। আশা করি এই পোস্টটি ভালো করে বুঝে পড়লে সমস্যাগুলোর সমাধান কিছুটা সহজ হয়ে যাবে। আমি এখানে স্ট্রাটেজি নিয়েও কিছু কথা বলার চেষ্টা করবো, যদিও এই জিনিসগুলো সবারই জানা থাকার কথা।&lt;/p&gt;

&lt;p&gt;কেনো প্রব্লেম ডিপি দিয়ে সল্ভ করা যাবে কিনা সেটা বোঝা মোটামুটি সহজ। প্রাথমিক দিকে সহজ ডিপি প্রব্লেমগুলােতে সাধারণত তোমাকে কিছু সংখ্যা বা কিছু শর্ত দিয়ে কিছু একটা করা যায় কিনা, বা কিছু একটা মিনিমাইজ করা বা ম্যক্সিমাইজ করার জন্য বলতে পারে। বা হয়তো কোনো একটি কাজ কয়ভাবে করা যায় বা ধরা যাক একটা কাজ অনেকভাবে করা যায়, তার মধ্যে কোনভাবে করলে সবথেকে বেশি লাভ হবে এরকম কিছু বেড় করতে বললে সেটা ডিপি দিয়ে করা যেতে পারে। সত্যি কথা বলতে গেলে ডিপি দিয়ে হয়তো প্রায় সবকিছুই করা সম্ভব, কারণ ডিপি মূল ধারণাটি হচ্ছে &lt;em&gt;সকল ভাবে চিন্তা করে দেখবো আর তার মধ্যে সবথেকে ভালো সলিউশনটি নিয়ে নিব&lt;/em&gt; । অর্থাৎ, এটি একদমই ব্রুটফোর্স টেকনিক,কিন্তু আমরা একটু চালাকি করে ব্রুটফোর্স করবো যাতে কোনো কিছু একবারের বেশি হিসাব করার দরকার না পরে। আমি এই কথাটি দিয়ে কি বোঝাচ্ছি সেটা না বুঝলে &lt;a href=&quot;http://www.shafaetsplanet.com/?p=1022&quot;&gt;এই পোস্টটি&lt;/a&gt; পড়ে দেখো, তারপর সামনের দিকে আগাও।&lt;/p&gt;

&lt;h2 id=&quot;dp-states-&quot;&gt;DP States &lt;a name=&quot;dp_states&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;ডিপি স্টেট নিয়ে আমি প্রাথমিক কথাগুলো বলছিনা, &lt;a href=&quot;http://www.shafaetsplanet.com/?p=1072&quot;&gt;এখানে&lt;/a&gt; দেখে নিতে পারো। আমরা ডিপি এর স্টেট কি, এটার কাজ কি, এগুলো জানি। এবার আমরা জানবো কীভাবে ডিপি স্টেটগুলো বেড় করা যায়। প্রথম কথা হচ্ছে যার এক্সপেরিয়েন্স যত বেশি সে তত তাড়াতাড়ি স্টেট বেড় করতে পারে। আর একবার ডিপির স্টেট বেড় করতে পারলে আমাদের প্রব্লেম সল্ভ করা কোনো ব্যাপারই না। ডিপির স্টেট বেড় করতে গেলে আমাদেরকে একটু সুন্দর করে  চিন্তা করতে হবে। প্রব্লেম পড়ার পর নিচের জিনিসগুলো ভালো করে খেয়াল করো:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;প্রব্লেমটি কী?&lt;/li&gt;
  &lt;li&gt;আমাকে কী কী দেয়া হয়েছে?&lt;/li&gt;
  &lt;li&gt;আমাকে কী কী বেড় করতে হবে?&lt;/li&gt;
  &lt;li&gt;আমি যা যা পেয়েছি সেগুলো থেকে আরও কী কী পাওয়া সম্ভব?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;উপরের জিনিসগুলো কীভাবে অ্যাপ্রোচ করতে হবে তা একটা প্রব্লেমের মাধ্যমে দেখাচ্ছি।&lt;/p&gt;

&lt;h2 id=&quot;problem-1-&quot;&gt;Problem 1 &lt;a name=&quot;Problem1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;তোমাকে  &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; টি সিঁড়ি দেয়া আছে। তুমি &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; নাম্বার সিঁড়িতে আছো, তোমাকে &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; তম সিড়িঁতে যেতে হবে। তুমি চাইলে এক স্টেপ সামনে যেতে পারো, অথবা দুই স্টেপ। অর্থাৎ, তুমি যদি &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; নাম্বার সিড়িঁতে থাকো তাহলে সেখান থেকে তুমি &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; বা &lt;script type=&quot;math/tex&quot;&gt;3&lt;/script&gt; নাম্বার সিড়িঁতে যেতে পারবে। এখন তোমাকে বলতে হবে তুমি কতভাবে &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; থেকে &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; তম সিড়িঁতে যেতে পারবে।&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;যদিও  প্রব্লেমটি খুবই সহজ, তবুও এখানে আমরা প্রব্লেমটি ধাপে ধাপে সমাধান করার চেষ্টা করবো। প্রথমেই আমাদেরকে প্রব্লেমটি বুঝতে হবে। এখানে প্রব্লেমটা অনেকটাই পরিষ্কার।   আমাকে 1 থেকে n পর্যন্ত যেতে হবে, কতভাবে যেতে পারবো সেটা বেড় করতে হবে। আমাদের ডিপি প্রব্লেম দেখার পর প্রথম কাজ হবে স্টেট বেড় করা। আমরা এখন স্টেট বেড় করবো এই প্রব্লেমে। এখানে খুব ভালো করে চিন্তা করো। ধরো আমরা x তম সিড়িঁতে আছি। এই x তম সিড়িঁতে কতভাবে আসা যাবে সেটা কিসের কিসের উপর নির্ভর করছে? x এর মান কত, তার উপর আমাদের  উত্তর নির্ভর করছে। তাহলে একটা স্টেট হবে x, অর্থাৎ আমরা কোথায় আছি সেটা আমাদের সমস্যার সমাধান করার জন্য প্রয়োজন পড়বে। আর কোনো কিছু কি দরকার পরছে আমাদের? আর কিছু আমাদের এখানে দরকার পড়বে না। কারণ কততম সিড়িঁতে কতভাবে আসা যায় এটা জানলেই আমাদের হয়ে যাচ্ছে। তাহলে আমাদের একটি অ্যারে, &lt;script type=&quot;math/tex&quot;&gt;dp(n)&lt;/script&gt;  রাখলেই হয়ে যাচ্ছে।  যেখানে &lt;script type=&quot;math/tex&quot;&gt;dp(i) = number\ of\ ways\ to\ reach\ i&lt;/script&gt; । এখন আমরা x তম সিড়িঁতে কোন ক‌োন সিড়িঁ থেকে আসতে পারবো? &lt;script type=&quot;math/tex&quot;&gt;x-1&lt;/script&gt;  আর &lt;script type=&quot;math/tex&quot;&gt;x-2&lt;/script&gt; তম সিড়িঁ থেকে, তাই না? তাহলে আমরা x তম সিড়িঁর জন্য উত্তরটি &lt;script type=&quot;math/tex&quot;&gt;x-1&lt;/script&gt; আর &lt;script type=&quot;math/tex&quot;&gt;x-2&lt;/script&gt; তম সিড়িঁর উত্তর থেকে জানতে পারি।  অন্যভাবে বলা যায়, &lt;script type=&quot;math/tex&quot;&gt;dp(x) = dp(x-1)+dp(x-2)&lt;/script&gt; কারণ আমরা যতভাবে &lt;script type=&quot;math/tex&quot;&gt;x-1&lt;/script&gt; আসতে পারি ততভাবে এক স্টেপ আগালে আমরা x  এ আসতে পারবো, আবার &lt;script type=&quot;math/tex&quot;&gt;x-2&lt;/script&gt; এ যতভাবে আসতে পারি, ততভাবে দুই স্টেপ আগালে আমরা x এ আাসতে পারবো।  তাহলে আমরা &lt;script type=&quot;math/tex&quot;&gt;dp(x-1)&lt;/script&gt; আর &lt;script type=&quot;math/tex&quot;&gt;dp(x-2)&lt;/script&gt; থেকে &lt;script type=&quot;math/tex&quot;&gt;dp(x)&lt;/script&gt; বেড় করতে পারছি, আগের মানগুলো ব্যাবহার করে পরের গুলো বেড় করা সম্ভব হচ্ছে। এভাবে &lt;a href=&quot;https://sites.google.com/site/smilitude/recursion_and_dp&quot;&gt;রিকার্সিভলি&lt;/a&gt; চিন্তা করলে দেখতে পাবে খুব শুরুর দিকের কিছু মান হাতে হাতে বেড় করে ফেলতে পারলে বাকি মানগুলো খুব সহজেই লুপ চালিয়ে বেড় করা যায়। এখানে আমরা &lt;script type=&quot;math/tex&quot;&gt;dp(0)&lt;/script&gt; আর &lt;script type=&quot;math/tex&quot;&gt;dp(1)&lt;/script&gt; বেড় করতে পারলেই হবে। কারণ  &lt;script type=&quot;math/tex&quot;&gt;dp(2) = dp(1)+dp(0)&lt;/script&gt; , বাকিগুলোও লুপ দিয়েই করা যাবে। এখন চিন্তা করো &lt;script type=&quot;math/tex&quot;&gt;dp(0)&lt;/script&gt; এর মান কি হবে।  আমরা 0 তম সিড়িঁতে এখন দাড়িঁয়ে আছি, আলাদা করে সেখানে কখনোই যাবোনা। তাহলে আমরা 0 তম সিড়িঁতে একভাবে যেতে পারি, সেটা হলো &lt;font color=&quot;red&quot;&gt;না যাওয়া&lt;/font&gt;.  তাহলে &lt;script type=&quot;math/tex&quot;&gt;dp(0) = 1&lt;/script&gt; । এবার আসি &lt;script type=&quot;math/tex&quot;&gt;dp(1)&lt;/script&gt; এ। আমরা &lt;script type=&quot;math/tex&quot;&gt;dp(1)&lt;/script&gt; এ একভাবেই আসতে পারব‌ো, সেটা হচ্ছে 0 তম সিড়িঁ থেকে এক স্টেপ নিয়ে 1 তম সিড়িঁতে যাবো। তাহলে &lt;script type=&quot;math/tex&quot;&gt;dp(1) = dp(0)&lt;/script&gt; । কিন্তু আমরা বাকি সিড়িঁগুলোতে ঠিক আগের সিড়িঁ বা ২ ঘর আগের সিড়িঁ থেকে আসতে পারবো। হয়ে গেলো! এবার &lt;script type=&quot;math/tex&quot;&gt;dp(n)&lt;/script&gt; হচ্ছে আমাদের উত্তর। এর টাইম কম্প্লেক্সিটি &lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt; কোড দেয়ার দরকার নেই, তাও নিচে দিয়ে দিচ্ছিঃ&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Answer is: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;variant-1-&quot;&gt;Variant 1 &lt;a name=&quot;problem1variant1&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;এখন যদি বলি আমরা সর্বোচ্চ k সাইজের জাম্প দিতে পারবো, অর্থাৎ, আমরা x তম সিড়িঁ থেকে &lt;script type=&quot;math/tex&quot;&gt;x+1,x+2,....,x+k&lt;/script&gt; তম সিড়িঁর যেকনো সিড়িঁতে যেতে পারবো, তাহলে কেমন হবে ব্যাপারটা? নিচে রিকার্সিভ ফর্মুলাটা দিয়ে দিচ্ছি, না বুঝলে আবার চিন্তা করে দেখো:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp(x) = \sum_{i = 1}^{k} dp(x-i)&lt;/script&gt;

&lt;p&gt;এটির কম্প্লেক্সিটি &lt;script type=&quot;math/tex&quot;&gt;O(n \times k)&lt;/script&gt;। কম্প্লেক্সিটি কীভাবে হিসাব করছি, সেটা না বুঝলে &lt;a href=&quot;http://www.shafaetsplanet.com/?p=1313&quot;&gt;এই ব্লগটি&lt;/a&gt; পড়ে দেখতে পারো। এটি &lt;a href=&quot;http://www.shafaetsplanet.com/?p=1557&quot;&gt;সেগমেন্ট ট্রি&lt;/a&gt; ব্যবহার করে সহজেই &lt;script type=&quot;math/tex&quot;&gt;O(n\log n)&lt;/script&gt; এ করা যায়, কিন্তু সেটা এখানে আলোচনা না করাই ভালো।&lt;/p&gt;

&lt;h3 id=&quot;variant-2-&quot;&gt;Variant 2 &lt;a name=&quot;problem1variant2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;এখন শেষ প্রব্লেমটিকে একটু কঠিন করা যাক। প্রব্লেমের সব ঠিক থাকবে, শুধু একটা নতুন শর্ত জুড়ে দিচ্ছি। তুমি একই মুভ(move) একটানা একাধিকবার দিতে পারবেনা। অর্থাৎ, ধরো তুমি 1 স্টেপ নিয়ে 4 থেকে 5 নাম্বার সিড়িঁতে গেলে । এখন তুমি আর 1 স্টেপ নিয়ে 5 থেকে 6 এ যেতে পারবেনা। যেহেতু ঠিক আগেরবার তুমি 1 নাম্বার মুভটি ব্যবহার করে ফেলেছো, তুমি এবার 1 নাম্বার মুভ ছাড়া বাকিগুলো ব্যবহার করতে পারবে। অর্থাৎ, একই ধরণের মুভ একটানা দিতে পারবেনা, 1-1-2 এই মুভটি দিতে পারবেনা, কারণ 1-1 একসাথে পড়ে যাচ্ছে, কিন্তু 1-2-1 মুভ দিতে পারবে, যেহেতু কোনো পাশাপাশি মুভ সমান না। এবার তোমাকে বেড় করতে হবে কতভাবে n এ যাওয়া যায়।&lt;/p&gt;

&lt;p&gt;এখানে লক্ষ্য করো, শুধু কোন ইন্ডেক্সে আছি, সেটাই বড় কথা নয়, আমরা সর্বশেষ কোন মুভ দিয়েছি সেটাও এখানে গুরুত্বপূর্ণ ভূমিকা পালন করছে। তাই আমরা সেটাও স্টেট হিসেবে রাখবো। অর্থাৎ, &lt;script type=&quot;math/tex&quot;&gt;dp(R,S)&lt;/script&gt; এর মানে হলো আমরা R তম পজিশনে আছি আর S তম মুভ দিয়েছি । তাহলে শেষ মুভ কি ছিল, এটা আমরা রেখে দিলাম। এখন শুধু আগের স্টেট গুলোর ওই মুভ ছাড়া বাকিগুলো &lt;script type=&quot;math/tex&quot;&gt;dp(R,S)&lt;/script&gt; এ যোগ করে দিব। আর ফাইনাল উত্তর হবে &lt;script type=&quot;math/tex&quot;&gt;\sum_{i = 1}^{k} dp(n,i)&lt;/script&gt; । নিচে কোডটি দিয়ে দিলাম:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//dp[i][j] তে শুধু তাদেরকেই যোগ করবো যাদের শেষ মুভ j নয়। &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The Answer Is: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;এই কোডের কম্প্লেক্সিটি &lt;script type=&quot;math/tex&quot;&gt;O(n\times k^2)&lt;/script&gt; ।&lt;/p&gt;

&lt;p&gt;এখন সামনের দিকে যাওয়ার আগে &lt;a href=&quot;http://www.shafaetsplanet.com/?p=1072&quot;&gt;Knapsack&lt;/a&gt;,&lt;a href=&quot;http://www.shafaetsplanet.com/?p=1158&quot;&gt;coin change,rock climbing&lt;/a&gt;,&lt;a href=&quot;http://www.shafaetsplanet.com/?p=1211&quot;&gt;LIS&lt;/a&gt;,&lt;a href=&quot;http://www.shafaetsplanet.com/?p=1862&quot;&gt;LCS&lt;/a&gt; একটু দেখে নাও।&lt;/p&gt;

&lt;h2 id=&quot;problem-2--&quot;&gt;Problem 2  &lt;a name=&quot;Problem2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;তোমাকে &lt;script type=&quot;math/tex&quot;&gt;n \times m&lt;/script&gt; সাইজের একটা গ্রিড দেয়া আছে। তোমাকে &lt;script type=&quot;math/tex&quot;&gt;(0,0)&lt;/script&gt; থেকে &lt;script type=&quot;math/tex&quot;&gt;(n-1,m-1)&lt;/script&gt; সেলে যেতে হবে। কিন্তু শর্ত হচ্ছে তুমি শুধুমাত্র ডানে বা নিচে যেতে পারবে। আর কিছু সেল ব্লক করা থাকবে, যেগুলোতে তুমি যেতে পারবেনা।  তুমি কতভাবে &lt;script type=&quot;math/tex&quot;&gt;(0,0)&lt;/script&gt; থেকে &lt;script type=&quot;math/tex&quot;&gt;(n-1,m-1)&lt;/script&gt;  সেলে যেতে পারবে?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;এখন, এই প্রব্লেমটা সল্ভ করবো কীভাবে? প্রথম কথা, আমরা কোথায় আছি, সেটা খুবই গুরুত্বপূর্ণ। তাই আমাদের স্টেটে সেলের পজিশন রাখতে হবে। আর কিছু কি রাখতে হবে? আমরা ওই সেলে কতভাবে আসতে পারছি সেটাই মূল বিষয়, তাই না? এজন্যই আমাদের ডিপির স্টেট হবে শুধু তার সেল, অর্থাৎ, রো(row) আর কলাম(column)।  তাহলে &lt;script type=&quot;math/tex&quot;&gt;dp(n,m)&lt;/script&gt; হলো আমাদের টেবিল আর এখানে &lt;script type=&quot;math/tex&quot;&gt;dp(S,R) = x&lt;/script&gt; হলে,&lt;script type=&quot;math/tex&quot;&gt;(0,0)&lt;/script&gt; থেকে &lt;script type=&quot;math/tex&quot;&gt;(S,R)&lt;/script&gt; সেলে &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; ভাবে আসা যায়। এখন আগের প্রব্লেমটার মতো চিন্তা করো। আমরা &lt;script type=&quot;math/tex&quot;&gt;(S,R)&lt;/script&gt; সেলে কোন কোন যায়গা থেকে আসতে পারবো ? ঠিক উপরের সেল অথবা বামের সেল থেকে, তাই না? অর্থাৎ, উপরের সেল আর বামের সেলের উপয়ের যোগফলই হলো আমাদের সেলের মোট উপায়ের সংখ্যা। সুতরাং, &lt;script type=&quot;math/tex&quot;&gt;dp(S,R) = dp(S-1,R)+dp(S,R-1)&lt;/script&gt; । আর আগের মতোই, &lt;script type=&quot;math/tex&quot;&gt;dp(0,0) = 1&lt;/script&gt; । এবার কোডটা দেখে ফেলি।&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// here function ok(a,b) means cell (a,b) exists and it's not blocked&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Answer is: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;variant-1--1&quot;&gt;Variant 1 &lt;a name=&quot;problem2variant1&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;এবার আবার প্রব্লেমটাকে আগের মতো একটু কঠিন করে দেই। তুমি একই ধরণের মুভ একটানা একটার বেশি দিতে পারবেনা। অর্থাৎ, তুমি একই সাথে দুই বা তার বেশিবার নিচে নামতে পারবেনা বা ডানে যেতে পারবেনা। অনেকটা আগের প্রব্লেমের মতোই।&lt;/p&gt;

&lt;p&gt;এখন কী করবো আমরা?  চিন্তা করে দেখো, আমরা যদি আগের মতোই সর্বশেষ মুভ কোনটা দিয়েছি সেটা জানি, তাহলেই হয়ে যাবে। আমরা উপর থেকে নিচে নামাকে 0 আর বাম থেকে ডানে যাওয়াকে 1 দিয়া প্রকাশ করতে পারি। তাহলেই হয়ে গেল। তাহলে আমাদের টেবিলটি হবে &lt;script type=&quot;math/tex&quot;&gt;dp(2,n,m)&lt;/script&gt; । এখানে &lt;script type=&quot;math/tex&quot;&gt;dp(0 , p , q)&lt;/script&gt; মানে আমরা উপর থেকে নিচে নেমেছি, আর  &lt;script type=&quot;math/tex&quot;&gt;dp(1 , p  , q)&lt;/script&gt; মানে আমরা বাম থেকে ডানে গিয়েছি। নিচে কোডটি দিয়ে দিচ্ছি।&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Answer is: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;variant2&quot;&gt;Variant2&lt;a name=&quot;problem2variant2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;এবার প্রব্লেমটাকে আরও কঠিন করা যেতে পারে। ধরো আমরা একসাথে সর্বোচ্চ K বার নিচে বা ডানে যেতে পারবো। তখন কি করবো? তখন উত্তরটি হবে এরকমঃ &lt;script type=&quot;math/tex&quot;&gt;dp(x,y) = \sum_{i=1}^{k} dp(x-i,y) + \sum_{i = 1}^{k} dp(x,y-i)&lt;/script&gt; ।  আর এই ভেরিয়েশনে যদি বলে একই মুভ একবারের বেশি দিতে পারবোনা, তাহলে শেষ মুভ কি দিয়েছি সেটাও রাখতে হবে আরকি, তখন টেবিলটি হবে &lt;script type=&quot;math/tex&quot;&gt;dp(k,x,y)&lt;/script&gt; ।&lt;/p&gt;

&lt;p&gt;এখন সামনে যাওয়ার আগে নিচের প্রব্লেমগুলো  সমাধান করে ফেলো:&lt;/p&gt;

&lt;h3 id=&quot;practice-problems-&quot;&gt;Practice Problems &lt;a name=&quot;practice1problems&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_a&quot;&gt;Frog1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_c&quot;&gt;Vacation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_b&quot;&gt;Frog2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_h&quot;&gt;grid1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_f&quot;&gt;LCS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lightoj.com/volume_showproblem.php?problem=1005&quot;&gt;Rooks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lightoj.com/volume_showproblem.php?problem=1011&quot;&gt;Marriage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lightoj.com/volume_showproblem.php?problem=1047&quot;&gt;Neighbour House&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lightoj.com/volume_showproblem.php?problem=1004&quot;&gt;monkey banana problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;important-tip&quot;&gt;&lt;font color=&quot;#f70202&quot;&gt;&lt;u&gt;Important Tip:&lt;/u&gt;&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;আমরা তো ডিপি টেবিলে এক বা একাধিক স্টেট রাখতে শিখে গেছি, তাই না? &lt;script type=&quot;math/tex&quot;&gt;dp(n,m)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;dp(n,m,k)&lt;/script&gt; ইত্যাদি। কিন্তু এই ডাইমেনশনগুলো কোন অর্ডারে নিচ্ছি সেটা কিন্তু প্রব্লেম সল্ভিংয়ে কোনো প্রভাব ফেলছে না, তাই না?  যেমন &lt;a href=&quot;#problem2variant1&quot;&gt;এই প্রব্লেমটা&lt;/a&gt; দেখো, এখানে আমরা &lt;script type=&quot;math/tex&quot;&gt;dp(2,n,m)&lt;/script&gt; নিয়েছিলাম, এখানে যদি &lt;script type=&quot;math/tex&quot;&gt;dp(n,m,2)&lt;/script&gt; নিতাম তাহলে কি প্রব্লেম সল্ভ করা যেত না? অবশ্যই যেত! কিন্তু একটা গুরুত্বপূর্ণ কথা মনে রাখবে, কম্পিউটার &lt;script type=&quot;math/tex&quot;&gt;dp(i,j)&lt;/script&gt; থেকে &lt;script type=&quot;math/tex&quot;&gt;dp(i,j+1)&lt;/script&gt; যে সময় নেয়, &lt;script type=&quot;math/tex&quot;&gt;dp(i,j)&lt;/script&gt; থেকে &lt;script type=&quot;math/tex&quot;&gt;dp(i+1,j)&lt;/script&gt; তে যেতে তার থেকে বেশি সময় নেয়। অর্থাৎ কম্পিউটার অ্যারের ইনডেক্সগুলো ভার্টিকালি(উপর থেকে নিচে) এক্সেস করার থেকে হরিজন্টালি(ডান থেকে বামে) এক্সেস খুব দ্রুত করতে পারে। তাই ডিপি এর স্টেটগুলো ক্রমবর্ধমানে সাজালে সময় সবথেকে কম লাগে। এজন্যই &lt;script type=&quot;math/tex&quot;&gt;dp(2,n,m)&lt;/script&gt; নিয়ে কাজ করা &lt;script type=&quot;math/tex&quot;&gt;dp(n,m,2)&lt;/script&gt; নিয়ে কাজ করার থেকে ভালো। এটা সবসময় মাথায় রাখবে। অনেক সময় এধরণের অপটিমাইজেশন দরকার পড়ে।&lt;/p&gt;

&lt;h2 id=&quot;problem-3-&quot;&gt;Problem 3 &lt;a name=&quot;problem3&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;তোমাকে একটি অ্যারে দেয়া আছে। প্রত্যেকটি ইন্ডেক্সে কিছু করে ভ্যালু আছে।  তোমাকে ওই অ্যারে থেকে এমন কিছু ইন্ডেক্স বেড় করতে হবে যেন তাদের ভ্যালুর যোগফল সর্বোচ্চ হয়। কিন্তু একটা শর্ত আছে। তুমি পাশাপাশি দুটি ভ্যালু নিতে পারবেনা। অর্থাৎ, তুমি x তম ইন্ডেক্স বাছাই করলে &lt;script type=&quot;math/tex&quot;&gt;x+1&lt;/script&gt;  বা &lt;script type=&quot;math/tex&quot;&gt;x-1&lt;/script&gt; তম ইন্ডেক্স নিতে পারবেনা।&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;এই প্রব্লেমটা ওই আগের মতোই ধাপে ধাপে সল্ভ করবো আমরা। প্রথমেই দেখবো স্টেট কি কি হতে পারে। আমরা কোন ইন্ডেক্সে আছি সেটা দরকার পরবে, তাই সেটা একটা স্টেট। আবার আমরা বর্তমান ইন্ডেক্সকে নিব নাকি নিবনা, এটাও দরকারি, তাই এই জিনিসটাও আমাদের মাথায় রাখতে হবে। তাহলে আমাদের ডিপি টেবিল হবে &lt;script type=&quot;math/tex&quot;&gt;dp(2,n)&lt;/script&gt; । আমরা প্রত্যেক ইন্ডেক্সে যাব, একবার ওই ইন্ডেক্সকে নিয়ে, আবার না নিয়ে দেখবো কোনটা ম্যাক্সিমাম হয়। এখন যদি আমরা বর্তমান ইন্সেক্সকে ইনক্লুড না করি, তাহলে আগের ইন্ডেক্সকে নিলেও চলবে, না নিলেও চলবে। তাই, &lt;script type=&quot;math/tex&quot;&gt;dp(0,x) = max \left \{ dp(0,x-1),dp(1,x-1)\right \}&lt;/script&gt; । কিন্তু আমরা যদি বর্তমান ইন্ডেক্সকে ইনক্লুড করি তাহলে আমরা আগের ইন্ডেক্স নিতে পারবোনা। তাই , &lt;script type=&quot;math/tex&quot;&gt;dp(1,x) = ara(x)+dp(0,x-1)&lt;/script&gt; । তাহলে আমাদের উত্তর হবে &lt;script type=&quot;math/tex&quot;&gt;max \left \{ dp(0,n-1),dp(1,n-1)\right \}&lt;/script&gt; । কোডটি নিচে দিয়ে দিচ্ছি।&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// we're not including ara[0] here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// we're including ara[0] here &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Answer is: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;practice--problems-&quot;&gt;Practice  Problems &lt;a name=&quot;practice2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atcoder.jp/contests/dp/tasks&quot;&gt;Atcoder Dp Contest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lightoj.com/volume_problemcategory.php?user_id=43745&amp;amp;category=Dynamic%20Programming&quot;&gt;Light Oj Dp Section&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/118/D&quot;&gt;Casers Legions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://uva.onlinejudge.org/external/113/p11331.pdf&quot;&gt;UVA 11331&lt;/a&gt; ( &lt;font color=&quot;green&quot;&gt;Hint: Bicoloring+knapsack&lt;/font&gt; )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;উপরের সমস্যাগুলো বুঝে বুঝে সমাধান করতে পারলে তোমাদের বেসিক ডিপির সবকিছুই হয়ে যাবে আশা করি। এরপরের পোস্টগুলোতে আমরা দেখবো কীভাবে আরও দারুন দারুন অবজারভেশন ব্যাবহার করে মজার মজার ডিপি প্রব্লেম সল্ভ করা যায়।&lt;/p&gt;</content><author><name>Ahnaf Shahriar Asif</name></author><category term="Dynamic Programming" /><summary type="html"></summary></entry><entry><title type="html">merge Sort Tree (MST)</title><link href="http://localhost:4000/2018/12/26/merge-sort-tree.html" rel="alternate" type="text/html" title="merge Sort Tree (MST)" /><published>2018-12-26T00:00:00+06:00</published><updated>2018-12-26T00:00:00+06:00</updated><id>http://localhost:4000/2018/12/26/merge-sort-tree</id><content type="html" xml:base="http://localhost:4000/2018/12/26/merge-sort-tree.html">&lt;!-- This is also a comment in markdown --&gt;

&lt;p&gt;এই আর্টিকেলটি পড়ার পূর্বশর্ত: সেগমেন্ট ট্রি, মার্জ সর্ট এলগোরিদম, বাইনারী সার্চ সম্পর্কে ধারণা থাকতে হবে। না থাকলে এই লিংকগুলো থেকে শিখে নাও:-&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.shafaetsplanet.com/?p=1557&quot;&gt;সেগমেন্ট ট্রি&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://duoblogger.github.io/2019/06/26/merge-sort.html&quot;&gt;মার্জ সর্ট&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.shafaetsplanet.com/?p=2279&quot;&gt;বাইনারী সার্চ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#02b300&quot;&gt;টার্গেট প্রবলেম:&lt;/span&gt; আমাদের কাছে একটা অ্যারে আছে। আমাদেরকে কিছু প্রশ্ন করা হবে অ্যারেটা সম্পর্কে। আমাদের সে প্রশ্নগুলোর উত্তর দিতে হবে। প্রশ্নগুলো ৩ টি সংখ্যা &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; ও &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; দেওয়া হবে। আমাদের বলতে হবে অ্যারেটির &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt; থেকে &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; এর মধ্যে &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; এর চেয়ে ছোট কয়টি সংখ্যা আছে।&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#02b300&quot;&gt;সলিউশান:&lt;/span&gt; এটা সলভ করার জন্য আমাদের মনে প্রথমে যে উপায়টা আসতে পারে সেটা হচ্ছে প্রথমে আমরা একটা আলাদা অ্যারেতে এই রেঞ্জ এর সবগুলা সংখ্যা কপি করব, তারপর সর্ট করব, তারপর দেখব কয়টা সংখ্যা k এর চেয়ে ছোট। এভাবে আমরা চাইলে বের করতে পারব। তবে এতে সমস্যা হচ্ছে অনেক সময় লাগবে। প্রতিবার সর্ট করতে ওরস্ট কেস এ টাইম কম্প্লেক্সিটি  &lt;script type=&quot;math/tex&quot;&gt;O(log(n))&lt;/script&gt;  হবে । তাই &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;  টা কুয়েরি হলে মোট টাইম কম্প্লেক্সিটি &lt;script type=&quot;math/tex&quot;&gt;O(qnlog(n))&lt;/script&gt; হবে। তাই এটা মোটামুটি ধরণের বড় &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt; এবং &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; এর জন্যও অনেক সময় নষ্ট করবে। এটা হলে তো হবে না। এটার টাইম কম্প্লেক্সিটি কমাতে হবে। এজন্য আমরা সেগমেন্ট ট্রির সাহায্য নিব। মূল আইডিয়াটা হচ্ছে সেগমেন্ট ট্রির প্রতিটা নোড এ একটা সংখ্যা সেভ না করে, ওই রেঞ্জ এর সবগুলো সংখ্যা সর্টেড আকারে সেভ করে রাখা হবে।  এটার জন্য আমরা মার্জ সর্ট এলগোরিদম এর সাহায্য নেব। মার্জ সর্ট করার সময় আমরা যেভাবে অ্যারেটাকে দুই ভাগে ভাগ করে ফেলি এবং ভাগ করতেই থাকি যতক্ষণ না একটা সংখ্যায় নেমে আসে, এভাবেই কিন্তু আমরা সেগমেন্ট ট্রিও বানাই। সেগমেন্ট ট্রি বানানোর সময়ও আমরা রেঞ্জটাকে দুই ভাগে ভাগ করে ফেলি এবং যতক্ষণ পর্যন্ত না শেষমেশ একটা সংখ্যায় নেমে আসে ততক্ষণ পর্যন্ত ভাগ করতেই থাকি। সেগমেন্ট ট্রি এবং মার্জ সর্ট এর অ্যারে ভাগ করার পদ্ধতিতে আমরা কিন্তু একটা মিল দেখতে পাচ্ছি। এই মিলটাকে ব্যবহার করে আমরা “মার্জ সর্ট” এবং “সেগমেন্ট ট্রি” এর মার্জ করে “মার্জ সর্ট ট্রি” বানাবো। এটা হচ্ছে একটা সেগমেন্ট ট্রি যার প্রত্যেকটা নোডে ওই রেঞ্জ এ মার্জ সর্ট করার পর যে সর্টেড অ্যারেটা তৈরি হয়েছে সেটা থাকবে। এটাকেই মার্জ সর্ট ট্রি বলা হয়। খুবই বেসিক ধারণা। মার্জ সর্ট এবং সেগমেন্ট ট্রি উভয়টা জানা থাকলে মার্জ সর্ট ট্রি বুঝা কোনো ব্যাপার ই না। 🙂&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#02b300&quot;&gt;ইমপ্লিমেন্টেশন:&lt;/span&gt; ইমপ্লিমেন্টেশনের জন্য আমরা প্রথমে একটি ২ডি ভেক্টর নিব। বিল্ড ফাংশানটা সাধারণ সেগমেন্ট ট্রির বিল্ড ফাংশান এর মতোই হবে। শুধু রেঞ্জ একটি সংখ্যায় নেমে আসলে আমরা ভেক্টরে ভ্যালু এসাইন না করে পুশ করে দিব। আর শেষ লাইনে প্যারেন্ট এর ভেক্টর তৈরি করার জন্য &lt;script type=&quot;math/tex&quot;&gt;merge()&lt;/script&gt; ফাংশনটি ব্যবহার করব। এটার কাজ তোমরা মার্জ সর্ট এলগোরিদম শিখার সময়ই জেনে এসেছ। 🙂 তাহলেই বিল্ড ফাংশানের কাজ শেষ। এবার আসে আমরা কুয়েরি কিভাবে করব। কুয়েরি করার জন্য আমরা সাধারণ কুয়েরির মতো রেঞ্জটাকে ২ এর পাওয়ারের অনেকগুলা রেঞ্জ এ ভেঙ্গে ফেলব। এ রেঞ্জ এর প্রত্যেকটা নোডের ভেক্টরই কিন্তু আগে থেকে সর্টেড। তাই আমরা বাইনারী সার্চ করে প্রথম সংখ্যাটা বের করব যেটা কুয়েরিতে প্রদত্ত সংখ্যাটার চেয়ে বড়। এটার আগের সবগুলা সংখ্যার সংখ্যাই হবে আমাদের কাঙ্ক্ষিত। এবার আমরা সবগুলা রেঞ্জ এর জন্য এই “সংখ্যাগুলোর সংখ্যার” (মানে কয়টা সংখ্যা আছে এমন)  যোগফল বের করে ফেলব। তাহলে এটাই হবে আমাদের কাঙ্ক্ষিত উত্তর।&lt;/p&gt;

&lt;p&gt;নিচে এটার সি++ এর কোড দেয়া হল:&lt;/p&gt;

&lt;p&gt;বিল্ড ফাংশন:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;build_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Build left tree &lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;build_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Build right tree&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Merging the two sorted arrays&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;কুয়েরি ফাংশন:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//out of range&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//Binary search over the current sorted vector to find elements smaller than K&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;কম্প্লেক্সিটি এনালাইসিস:&lt;/p&gt;

&lt;p&gt;বিল্ড করার টাইম কম্প্লেক্সিটি হবে &lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt;। এটা আমরা সহজেই অনুধাবন করতে পারি। এখন আসল প্রশ্ন হচ্ছে মেমোরি কম্প্লেক্সিটি কত হবে। আমরা একটু ভাবলেই বুঝতে পারবো যে মেমোরি কম্প্লেক্সিটিও &lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt; হবে। কারণ একটা সংখ্যা সর্বোচ্চ &lt;script type=&quot;math/tex&quot;&gt;logn&lt;/script&gt; সংখ্যাক বার ট্রি তে থাকতে পারে (ট্রি এর হাইট)।&lt;/p&gt;

&lt;p&gt;কুয়েরি ফাংশানের কম্প্লেক্সিটি &lt;script type=&quot;math/tex&quot;&gt;O(log^{2} n)&lt;/script&gt; হবে। কারণ একটা রেঞ্জ কে সর্বোচ্চ &lt;script type=&quot;math/tex&quot;&gt;logn&lt;/script&gt; টা ভাগে ভাগ করা যায়। আর প্রতিটা রেঞ্জ এর জন্য একবার করে বাইনারী সার্চ করা লাগবে, যার কম্প্লেক্সিটি &lt;script type=&quot;math/tex&quot;&gt;logn&lt;/script&gt;। তাই মোট কম্প্লেক্সিটি হবে &lt;script type=&quot;math/tex&quot;&gt;O(log^{2} n)&lt;/script&gt; 🙂&lt;/p&gt;

&lt;p&gt;প্র্যাকটিস প্রবলেমস:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/785/problem/E&quot;&gt;Anton and Permutation&lt;/a&gt;
&lt;a href=&quot;https://www.spoj.com/problems/KQUERYO/&quot;&gt;KQUERYO&lt;/a&gt;
এর মাধ্যমেই আমার মার্জ সর্ট ট্রি নিয়ে বিরক্তিকর ক্যাচক্যাচানি শেষ হল।  🙂&lt;/p&gt;</content><author><name>Munim Hasan Wasi</name></author><category term="Data Structures" /><category term="Sorting" /><summary type="html"></summary></entry><entry><title type="html">merge Sort</title><link href="http://localhost:4000/2018/12/10/merge-sort.html" rel="alternate" type="text/html" title="merge Sort" /><published>2018-12-10T00:00:00+06:00</published><updated>2018-12-10T00:00:00+06:00</updated><id>http://localhost:4000/2018/12/10/merge-sort</id><content type="html" xml:base="http://localhost:4000/2018/12/10/merge-sort.html">&lt;!-- This is also a comment in markdown --&gt;
&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- add2 --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-8949878373616356&quot; data-ad-slot=&quot;7315241833&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;আমরা সবাই জানি, মাঝে মাঝে অনেক দরকারে আমাদেরকে অ্যারে সর্ট করা লাগে, আর সবথেকে ভাল সর্টিং অ্যালগরিদম  &lt;script type=&quot;math/tex&quot;&gt;n\log { n }&lt;/script&gt; এ কাজ করে। কিন্তু আমরা তো &lt;script type=&quot;math/tex&quot;&gt;O({ n }^{ 2 })&lt;/script&gt; এ সর্ট করতে পারি, কিন্তু  জানি না, কিভাব &lt;script type=&quot;math/tex&quot;&gt;n\log { n }&lt;/script&gt; এ সর্টিং করা যায়। যাই হোক, আজকে আমরা সেটাই জানার চেষ্টা করব।&lt;/p&gt;

&lt;h3&gt;&lt;font color=&quot;#4459c9&quot;&gt;Naive Approach&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;আমরা সবাই কিন্তু &lt;script type=&quot;math/tex&quot;&gt;O({ n }^{ 2 })&lt;/script&gt; এ সহজেই সর্ট করতে পারি। এখন আমাদের উদ্দেশ্য হল একে &lt;script type=&quot;math/tex&quot;&gt;n\log { n }&lt;/script&gt; এ রূপান্তর করা। দেখা যাক কি হয়।&lt;/p&gt;

&lt;p&gt;আচ্ছা, আমাদের যদি ২ টা সর্টেড  অ্যারে দেয়া হয়, আর যদি কোনোভাবে আমরা ২ টা অ্যারেকে &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করতে পারি, তাহলেই অনেক কাজ হয়ে যায়। কিন্তু আমি এখনি সেইদিকে যাচ্ছি না।  ধরে নাও আমরা ২ টা সর্টেড অ্যারে &lt;script type=&quot;math/tex&quot;&gt;O({ n })&lt;/script&gt; এ &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt;  করতে পারি। আর তাই যদি পারি, তাহলে কি আমরা কোনভাবে ওই &lt;script type=&quot;math/tex&quot;&gt;property&lt;/script&gt; ব্যাবহার করে সুবিধা পাব &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; দেখা যাক।&lt;/p&gt;

&lt;h3&gt;&lt;font color=&quot;#4459c9&quot;&gt;Better Approach 😮&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;ধরো একটা অ্যারে দেয়া আছে  &lt;script type=&quot;math/tex&quot;&gt;ara[12] = \left\{ 5,2,4,8,9,6,1,3,10,7,5,11 \right\}&lt;/script&gt; ।&lt;/p&gt;

&lt;p&gt;তুমি করলে কি, এই অ্যারেকে ২ ভাগে ভাগ করে ফেললে।&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/mamur_beta.png&quot; alt=&quot;mamur_beta&quot; /&gt;&lt;/p&gt;

&lt;p&gt;এখন চিন্তা করো, এভাবে ভাগ করে আমাদের লাভ কি &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; আগেই বলেছি আমাদের যদি ২ টা সর্টেড অ্যারে  দেয়া হয়, তাহলে তাদেরকে &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করতে আমাদের &lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt; সময় লাগে, কিভাবে &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; সেটা পরে বলছি, আগে ধরে নাও। আচ্ছা, হলো,এবার আমরা গাণিতিকভাবে দেখব, আমাদের কি উপকার হলো 🙂
আগে আসি, সম্পূর্ণ অ্যারে &lt;script type=&quot;math/tex&quot;&gt;O({ n }^{ 2 })&lt;/script&gt; তে সর্ট করলে কি হতো।&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;⇒ O({ n }^{ 2 })&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;⇒ O({ 12 }^{ 2 })&lt;/script&gt; ⇒ O(144)&lt;/p&gt;

&lt;p&gt;এবার আমাদের নতুন Approach এর কি অবস্থা সেটা দেখা যাক 🙂&lt;/p&gt;

&lt;p&gt;২ টা অ্যারে আছে, প্রথমটা সর্ট করতে লাগে &lt;script type=&quot;math/tex&quot;&gt;O({ p}^{ 2 }) = 36&lt;/script&gt;, দ্বিতীয় অ্যারে  সর্ট করতে লাগে   &lt;script type=&quot;math/tex&quot;&gt;O({ q}^{ 2 }) = 36&lt;/script&gt; , বা , মোট &lt;script type=&quot;math/tex&quot;&gt;72&lt;/script&gt; , আর &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করতে লাগবে  &lt;script type=&quot;math/tex&quot;&gt;O(n) = 12&lt;/script&gt; . সুতরাং মোট কাজ করতে হল  &lt;script type=&quot;math/tex&quot;&gt;72+12 = 84&lt;/script&gt;. কোথায় &lt;script type=&quot;math/tex&quot;&gt;144&lt;/script&gt;,  কোথায় &lt;script type=&quot;math/tex&quot;&gt;84&lt;/script&gt; ! !😮 কি প্রো রে বাবা 😥 ।&lt;/p&gt;

&lt;p&gt;এবার একটা  &lt;script type=&quot;math/tex&quot;&gt;twist&lt;/script&gt; দিচ্ছি। আমরা যদি প্রথম অ্যারেকে আবার &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; ভাগে ভাগ করি,তাহলে আমাদের প্রথম অ্যারে সর্ট করতে কত সময় লাগবে &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; অইত্ত, &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; ভাগ কে সর্ট করবা , তারপর &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করবা, হিসাব করে দেখ, মোট &lt;script type=&quot;math/tex&quot;&gt;24&lt;/script&gt; টা অপারেশন করা লাগছে, আগে কিন্তু &lt;script type=&quot;math/tex&quot;&gt;36&lt;/script&gt; টা করা লাগত। একিভাবে আমরা যদি ডান পাশের অ্যারেকেও &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; ভাগে ভাগ করে সর্ট করি, তাহলে আমাদের &lt;script type=&quot;math/tex&quot;&gt;24&lt;/script&gt; টা অপারেশন করা লাগতেছে, তার মানে তখন সম্পূর্ণ অ্যারে সর্ট করতে আমাদের লাগবে হলো, &lt;script type=&quot;math/tex&quot;&gt;24+24+12 = 60&lt;/script&gt; 😮 কোথায় &lt;script type=&quot;math/tex&quot;&gt;84&lt;/script&gt; আর কোথায় &lt;script type=&quot;math/tex&quot;&gt;60!&lt;/script&gt; আবার যেগুলাকে ভাগ করে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা করে পেলাম, সেগুলাকে আরও ভাগ করে আরও কমানো সম্ভব না &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; এভাবে আমরা আসলে কতক্ষণ পর্যন্ত ভাঙতে পারব &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; চিন্তা করো তো দেখি &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; হুম, যদি কখনো ভাগ করতে করতে দেখো যে সাইজ &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; হয়ে গেছে, তাহলে কি আর ভাগ করা লাগবে ? লাগবে না তো, &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; সাইজের একটা অ্যারে তো আগে থেকেই সর্টেড! 😀 তাহলে আমরা &lt;script type=&quot;math/tex&quot;&gt;recursion&lt;/script&gt; এর মতো করে চিন্তা করবো। ভাঙতে থাকব, যখন সাইজ &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; হয়ে যাবে, তখন আর সর্ট করা লাগবে না। এখন চিন্তা করো তো দেখি &lt;script type=&quot;math/tex&quot;&gt;!&lt;/script&gt; যদি &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; পাশের অ্যারেই &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; সাইজের হয়, তাহলে আমাদের ওই অ্যারেগুলাকে কি নতুন করে সর্ট করা লাগতেছে? লাগতেছে না কিন্তু, শুধুমাত্র আমরা &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করে উপরের দিকে যেতে থাকব। তার মানে &lt;script type=&quot;math/tex&quot;&gt;O({ n }^{ 2 })&lt;/script&gt; এ সর্ট করার যে বেপারটা, সেটা আমাদের করাই লাগতেসে না, শুধু &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করে করে আমরা উপরের দিকে উঠে যাচ্ছি, তাহলে আমাদের মোট merge করতে যা টাইম লাগবে, তাই হলো আমাদের &lt;script type=&quot;math/tex&quot;&gt;Complexity&lt;/script&gt; 🙂 ।&lt;/p&gt;

&lt;h3&gt;&lt;font color=&quot;#4459c9&quot;&gt;merge Function 😮&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;এবার আসা যাক আমাদের সেই বিখ্যাত &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; ফাংশনটার দিকে 😛&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/picture1.png?w=740&quot; alt=&quot;picture1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;আমরা প্রথমেই উপরের ছবিদুটোর দিকে তাকাই । আমরা অ্যারে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টাকে সর্ট করেছি কোনোভাবে। এবার আমাদের &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করে বড়ো অ্যারে বানাতে হবে।  যদি আমরা এই অ্যারে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টার মোট &lt;script type=&quot;math/tex&quot;&gt;12&lt;/script&gt; টা সংখ্যাকে &lt;script type=&quot;math/tex&quot;&gt;12&lt;/script&gt; টা অপারেশন করে সর্ট করতে পারি, তাহলেই আমরা ভালো করেই বুঝতে পারবো, জিনিষটা কিভাবে &lt;script type=&quot;math/tex&quot;&gt;O({ n })&lt;/script&gt; এ কাজ করে। এবার নিচের ছবি দেখো। আমরা এই &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা অ্যারে থেকে &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; টা &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; টা করে এলিমেন্ট নিয়ে বড়ো অ্যারেটাতে বসাবো এবং ওই বড়ো অ্যারেটাতে ছোট &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা অ্যারের সবগুলো এলিমেন্ট সর্টেড অবস্থায় থাকবে। তার মানে আমরা &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;টা অ্যারেকে &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করে একটা বড়ো অ্যারে বানাচ্ছি, সেটাই হলো আমাদের মূল উদ্দেশ্য।&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/picture2.png?w=740&quot; alt=&quot;picture2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;দেখতেই পারছো, আমরা নিচের ছোটো অ্যারে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টার প্রথম এলিমেন্টে একটা করে পয়েন্টার রাখি। এরপরের সবকিছু কহু সহজ, আমরা শুধু এই &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা পয়েন্টার দেখেই আমাদের সিদ্ধান্ত নিব। লাল আর সবুজ পয়েন্টারের মধ্যে যে এলিমেন্ট ছোটো,সেটি বড়ো অ্যারেতে ইনসার্ট করবো এবং সেই পয়েন্টার ডানদিকে একঘর সামনে নিব। যেহেতু, অ্যারে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;টা সর্টেড, তাই আমাদের এই কাজটা করতে সমস্যা হবেনা। একটু চিন্তা করলেই বুঝতে পারবে জিনিসটা কেন কাজ করে। লাল আর সবুজ পয়েন্টারের আগের এলিমেন্টগুলা আগেই ইনসার্ট করা হয়ে গেছে , সুতরাং এভাবে নিলেই আমরা বড় অ্যারেটা সর্টেড আকারে পেয়ে যাবো। নিচের ছবিগুলা দেখ, একদম হাতে হাতে করে করে দেখিয়েছি, ছবিগুলো দেখলে মুল কনসেপ্ট বুঝতে কষ্ট হওয়ার কথা না 🙂&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/picture3.png?w=740&quot; alt=&quot;picture3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ডানপাশের অ্যারের পয়েন্টার &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; ঘর সামনে নিলাম, যেহেতু &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
1 &lt; 2 %]]&gt;&lt;/script&gt; । এভাবে নিচের ছবিগুলো পর্যবেক্ষণ কর 🙂।&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/main_picture.png?w=740&quot; alt=&quot;main_picture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/main_picture5.png?w=740&quot; alt=&quot;main_picture5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/main_picture2.png?w=783&amp;amp;h=647&quot; alt=&quot;main_picture2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/main_picture3.png?w=740&quot; alt=&quot;main_picture3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/main_picture61.png?w=740&quot; alt=&quot;main_picture6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://roomcharshotin.files.wordpress.com/2018/09/main_picture_done.png?w=740&quot; alt=&quot;main_picture_done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;তাহলে, আমরা কি করছি আসলে &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; আমরা &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা পয়েন্টার নিচ্ছি, আর যেটা ছোটো, সেটাকে ওই বড় অ্যারেটার মধ্যে Insert করে, তারপর সেই পয়েন্টারকে এক ঘর সামনে নিচ্ছি, শেষ &lt;script type=&quot;math/tex&quot;&gt;!&lt;/script&gt; আমরা সহজেই &lt;script type=&quot;math/tex&quot;&gt;O({ n })&lt;/script&gt; এ &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করে ফেলতে পারছি 😀 । এবার কোডটা একটু দেখা যাক। আমরা একটা ফাংশন বানাবো, যেখানে আমরা &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা ছোটো অ্যারে আর একটা বড় অ্যারে দিব, আর তারা ছোট অ্যারে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টাকে &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করে বড় অ্যারেটাকে সর্টেড অবস্থায় আমাদেরকে দিবে , কি মজা &lt;script type=&quot;math/tex&quot;&gt;!!!&lt;/script&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// here ara1[] = left array;&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// here ara2[] = right array;&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// here temp[] = the big array(where we are merging)&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// here n means size of the left and right array&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// here main_size means then size of the big array (mainly n*2)&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;//here i means pointer of left array&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;//here j means pointer of right array&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// it means we have inserted all the values of the left array&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// it means we have inserted all the values of the left array&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ara1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// you know what it means :) &lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ara2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// you also know about it, think deeply :) &lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//everytime we are increasing k, after inserting a value in the temp[] array&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;তো, কোড দেখে তোমরা বুঝে ফেলেছ যে কিভাবে &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করতে হয়। এবার একটা জিনিষ খেয়াল কর, আমরা আমাদের মুল যে টার্গেট, সেখানে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা আলাদা অ্যারা কে &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করছি না, একটা অ্যারা এর &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা অংশকে &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করছি। তাহলে আমাদের কি আসলে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; টা আলাদা আর‍্যা &lt;script type=&quot;math/tex&quot;&gt;Declare&lt;/script&gt; করার দরকার আছে &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; একটু চিন্তা করে দেখ, আমরা যদি শুধু &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; অ্যার &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; পাঠাই তাহলেও কিন্তু আমাদের চলে যাচ্ছে। এখন চিন্তা কর দেখি, আমাদের সম্পূর্ণ সর্টিং ফাংশনটা কেমন হবে&lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; আমরা কি করছি&lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; অ্যারাটাকে প্রথমে &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; ভাগে ভাগ করতে থাকছি, অ্যার যখন ভাগ করা শেষ তখন &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; করে উপরে উঠে যাচ্ছি। এই কাজটা কি তুমি একা একা করতে পারবে &lt;script type=&quot;math/tex&quot;&gt;?&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;30&lt;/script&gt; মিনিট চেষ্টা করে দেখ, তারপর নিচের কোডটা দেখ।&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//main array&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//temp array&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergesort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// sorts num[low....high]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//it is the basecase&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mergesort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mergesort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//inserting sorted list[low to high] from temp to main array..&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;আজ এ পর্যন্তই। &lt;script type=&quot;math/tex&quot;&gt;merge&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;Sort&lt;/script&gt; নিয়ে বকবকানি এখানেই শেষ। তুমি যদি সেগমেন্ট ট্রি পারো, তাহলে &lt;a href=&quot;https://roomcharshotin.wordpress.com/2018/10/01/merge-sort-tree-mst/&quot;&gt;এই ব্লগটি &lt;/a&gt; পড়ে দেখতে পারো🙂 &lt;strong&gt;হ্যাপি কোডিং&lt;/strong&gt; !
&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- add2 --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-8949878373616356&quot; data-ad-slot=&quot;7315241833&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({}); 
&lt;/script&gt;&lt;/p&gt;</content><author><name>Ahnaf Shahriar Asif</name></author><category term="Sorting" /><summary type="html"></summary></entry></feed>